<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Blog Title</title>
  <subtitle>This is a longer description about your blog.</subtitle>
  <link href="https://example.com/website/feed/feed.xml" rel="self" />
  <link href="https://example.com/website/" />
  <updated>2025-08-06T00:00:00Z</updated>
  <id>https://example.com/website/</id>
  <author>
    <name>Your Name</name>
  </author>
  <entry>
    <title>Neovim configuration for file and module navigation in CDS models</title>
    <link href="https://example.com/website/blog/2025-08-06-neovim-configuration-for-file-and-module-navigation-in-cds-models/" />
    <updated>2025-08-06T00:00:00Z</updated>
    <id>https://example.com/website/blog/2025-08-06-neovim-configuration-for-file-and-module-navigation-in-cds-models/</id>
    <content type="html">&lt;h2 id=&quot;cds-modelling-across-files-and-modules&quot;&gt;CDS modelling across files and modules&lt;/h2&gt;
&lt;p&gt;In the context of CDS models, one of the best practices is to embrace &lt;a href=&quot;https://cap.cloud.sap/docs/about/best-practices#aspects&quot;&gt;aspects&lt;/a&gt; and &amp;quot;factor out separate concerns into separate files&amp;quot;. In addition to files the CDS compiler supports Node.js packages (modules).&lt;/p&gt;
&lt;p&gt;An example of both can be found in the &lt;a href=&quot;https://cap.cloud.sap/docs/tools/cds-cli#sample&quot;&gt;sample&lt;/a&gt; facet. Let&#39;s create a project based on this sample facet and explore.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /tmp &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cds init &lt;span class=&quot;token parameter variable&quot;&gt;--add&lt;/span&gt; sample sample &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; sample &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tree &lt;span class=&quot;token parameter variable&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
creating new CAP project &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; ./sample

adding nodejs
adding sample

successfully created project – &lt;span class=&quot;token builtin class-name&quot;&gt;continue&lt;/span&gt; with &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; sample

&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; samples on https://github.com/SAP-samples/cloud-cap-samples
learn about next steps at https://cap.cloud.sap
&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
├── README.md
├── app
│   ├── _i18n
│   │   ├── i18n.properties
│   │   └── i18n_de.properties
│   ├── admin-books
│   │   ├── fiori-service.cds
│   │   └── webapp
│   ├── appconfig
│   │   └── fioriSandboxConfig.json
│   ├── browse
│   │   ├── fiori-service.cds
│   │   └── webapp
│   ├── common.cds
│   ├── index.html
│   └── services.cds
├── db
│   ├── data
│   │   ├── sap.capire.bookshop-Authors.csv
│   │   ├── sap.capire.bookshop-Books.csv
│   │   ├── sap.capire.bookshop-Books_texts.csv
│   │   └── sap.capire.bookshop-Genres.csv
│   └── schema.cds
├── eslint.config.mjs
├── package.json
└── srv
    ├── admin-service.cds
    ├── admin-service.js
    ├── cat-service.cds
    └── cat-service.js

&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; directories, &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; files&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;examining-the-using-references&quot;&gt;Examining the &#39;using&#39; references&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;app/admin-books/fiori-service.cds&lt;/code&gt; there&#39;s this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { AdminService } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../../srv/admin-&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt;.cds&#39;;
&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../../db/schema&#39;;
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;AdminService&lt;/code&gt; is being imported from &lt;code&gt;../../srv/admin-service.cds&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; my } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../db/schema&#39;;
&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt; AdminService &lt;span class=&quot;token annotation important&quot;&gt;@(requires:&#39;admin&#39;)&lt;/span&gt; {
  &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token cdl-keyword keyword&quot;&gt;projection&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; my.Books;
  &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Authors &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token cdl-keyword keyword&quot;&gt;projection&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; my.Authors;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In turn, the entities here are from the &lt;code&gt;sap.capire.bookshop&lt;/code&gt; namespace which is imported from &lt;code&gt;../db/schema&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { Currency, managed, sap } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;@sap/cds/common&#39;;
&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; sap.capire.bookshop;

&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books : managed {
   ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;code&gt;Currency&lt;/code&gt;, &lt;code&gt;managed&lt;/code&gt; and &lt;code&gt;sap&lt;/code&gt; are imported from the module &lt;code&gt;@sap/cds/common&lt;/code&gt;, a file (&lt;code&gt;common.cds&lt;/code&gt;) within the &lt;code&gt;@sap/cds&lt;/code&gt; module, which (at this point) is available in the globally installed &lt;code&gt;@sap/cds-dk&lt;/code&gt; module location (as we haven&#39;t performed a project-local &lt;code&gt;npm install&lt;/code&gt; yet), and looks like this (heavily redacted):&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token cqlkeywords keyword&quot;&gt;type&lt;/span&gt; Currency : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to sap&lt;/span&gt;.common.Currencies;
...
&lt;span class=&quot;token keyword&quot;&gt;aspect&lt;/span&gt; managed {
  createdAt  : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp &lt;/span&gt;&lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $now;
  createdBy  : User      &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $user;
  modifiedAt : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp &lt;/span&gt;&lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $now  &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.update&lt;/span&gt; : $now;
  modifiedBy : User      &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $user &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.update&lt;/span&gt; : $user;
}
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;visualising-the-navigation-path&quot;&gt;Visualising the navigation path&lt;/h3&gt;
&lt;p&gt;Here&#39;s what these relations (and navigations) look like in &amp;quot;diagram&amp;quot; form (thanks to &lt;a href=&quot;https://asciiflow.com/#/&quot;&gt;ASCIIFlow&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;+-----------------------------+
|app/admin/fiori-service.cds  |
+-----------------------------+
|using ... from               |
|&#39;../../srv/admin-service.cds&#39;|
|             |              1|
+-------------|---------------+   +-----------------------------+
              +-------------------|srv/admin-service.cds        |
                                  +-----------------------------+
                                  |using ... from               |
                                  |&#39;../db/schema.cds&#39;           |
                                  |            |               2|
+-----------------------------+   +------------|----------------+
|db/schema.cds                |----------------+
+-----------------------------+
|using ... from               |
|&#39;@sap/cds/common&#39;            |
|             |              3|
+-------------|---------------+   +-----------------------------+
              +-------------------|@sap/cds/common              |
                                  +-----------------------------+
                                  |type Currency ...            |
                                  |aspect managed { ... }       |
                                  |                            4|
                                  +-----------------------------+&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;As mentioned earlier, the &lt;code&gt;@sap/cds/common&lt;/code&gt; resource is a file called &lt;code&gt;common.cds&lt;/code&gt; within the &lt;code&gt;@sap/cds&lt;/code&gt; module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What&#39;s notable is that these relations are expressed differently each time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the first points to &lt;code&gt;../../srv/admin-service.cds&lt;/code&gt; which has an explicit &lt;code&gt;.cds&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;the second points to &lt;code&gt;../db/schema&lt;/code&gt; which has no extension&lt;/li&gt;
&lt;li&gt;the third points to a Node.js module based resource &lt;code&gt;@sap/cds/common&lt;/code&gt;, again with no extension specified&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s a quick demo of how that navigation path can be followed in VS Code, with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=SAPSE.vscode-cds&quot;&gt;SAP CDS Language Support&lt;/a&gt; extension:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/08/vscode-nav.gif&quot; alt=&quot;navigation in VS Code&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;making-cds-model-navigation-work-in-neovim&quot;&gt;Making CDS model navigation work in Neovim&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;@sap/cds-lsp&lt;/code&gt; language server in play, plus the Tree-sitter queries for CDS, I have a good experience in Neovim already (see &lt;a href=&quot;https://example.com/website/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, using the standard &lt;a href=&quot;https://neovim.io/doc/user/editing.html#gf&quot;&gt;gf&lt;/a&gt; mechanism left me wanting, due to the types of navigation target and the vagaries of how they are expressed. With a little configuration though, (which is still experimental at this stage, as I&#39;m still learning) I&#39;ve improved the situation.&lt;/p&gt;
&lt;p&gt;I added some &lt;a href=&quot;https://neovim.io/doc/user/usr_41.html#_writing-a-filetype-plugin&quot;&gt;ftplugin&lt;/a&gt; configuration specific to CDS files, in an &lt;code&gt;after/ftplugin/cds.lua&lt;/code&gt; file within my Neovim config, and it looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- Settings to be able to navigate to cds resources in Node.js modules&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Given a path p, add it to the &#39;path&#39; if it exists&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; addpath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fs_stat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Auto add .cds extension to files if necessary when nav with gf&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;suffixesadd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.cds&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Ensure that the literal @ symbol is treated as part of a filename&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- (required as the CAP module names are in the @sap namespace)&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isfname&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;append &lt;span class=&quot;token string&quot;&gt;&#39;@-@&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- The standard module location&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; moduledir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/node_modules&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- If a project-local npm install has been executed then projpath&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- will reflect the project-local node_modules dir&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; projpath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;package.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; moduledir

&lt;span class=&quot;token comment&quot;&gt;-- We can also add the CAP global based node_modules dir,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- based on the location of the &#39;cds&#39; executable&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; cdsdkpath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exepath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cds&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/../lib/node_modules/@sap/cds-dk&#39;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; moduledir

&lt;span class=&quot;token comment&quot;&gt;-- Add them if they exist&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;addpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;projpath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;addpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cdsdkpath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s a quick summary:&lt;/p&gt;
&lt;p&gt;I have a simple function &lt;code&gt;addpath&lt;/code&gt; which will add a (path) value to &lt;code&gt;path&lt;/code&gt; option, which the help describes as &amp;quot;a list of directories which will be searched when using &lt;code&gt;gf&lt;/code&gt; ... and other commands&amp;quot;. The function uses &lt;a href=&quot;https://neovim.io/doc/user/lua.html#vim.fs.exists()&quot;&gt;uv.fs_stat&lt;/a&gt; to ensure the directory actually exists before adding it.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;suffixesadd&lt;/code&gt; option (via &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;suffixesadd&#39;&quot;&gt;vim.opt.suffixesadd&lt;/a&gt;) is also related to the use of &lt;code&gt;gf&lt;/code&gt; and is a &amp;quot;comma-separated list of suffixes, which are used when searching for a file for the &lt;code&gt;gf&lt;/code&gt;, &lt;code&gt;[I&lt;/code&gt;, etc. commands&amp;quot;. So here I add &lt;code&gt;.cds&lt;/code&gt; to this option for the case where an extension isn&#39;t given - like in this case:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; my } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../db/schema&#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The extension is omitted here as a sort of CAP best practice, and could in fact be &lt;code&gt;.csn&lt;/code&gt;, the compiled machine-readable equivalent of CDL (the human-readable language used in CDS model files). But I&#39;ll cross that bridge when I come to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&#39;s it with regards to handling navigation to other CDS model files. But navigation to Node.js modules requires a bit more fettling.&lt;/p&gt;
&lt;p&gt;The CAP modules are all in the &lt;code&gt;sap&lt;/code&gt; namespace. Namespaces, or &lt;a href=&quot;https://docs.npmjs.com/about-scopes&quot;&gt;scopes&lt;/a&gt;, are prefixed with the &lt;code&gt;@&lt;/code&gt; symbol (as in &lt;code&gt;@sap/cds&lt;/code&gt;, for example). When modules are installed, in the &lt;code&gt;node_modules/&lt;/code&gt; directory, the &lt;code&gt;@&lt;/code&gt;-prefixed namespace forms part of the directory structure. So in this &lt;code&gt;sample&lt;/code&gt; project, after running &lt;code&gt;npm install&lt;/code&gt;, here&#39;s where &lt;code&gt;@sap/cds/common&lt;/code&gt; is to be found:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node_modules/
├── @cap-js
│   ├── cds-types
│   │   ├── ...
│   │   └── scripts
│   ├── db-service
│   │   ├── ...
│   │   └── package.json
│   └── sqlite
│       ├── ...
│       └── package.json
└── @sap
    └── cds
        ├── CHANGELOG.md
        ├── LICENSE
        ├── README.md
        ├── _i18n
        ├── app
        ├── bin
  ---&gt;  ├── common.cds
        ├── eslint.config.mjs
        ├── lib
        ├── libx
        ├── package.json
        ├── server.js
        ├── srv
        └── tasks&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That means I need to add the literal &lt;code&gt;@&lt;/code&gt; symbol to the &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;isfname&#39;&quot;&gt;isfname&lt;/a&gt; option, which denotes the characters included in filenames. If we look at the default value for &lt;code&gt;isfname&lt;/code&gt; (with &lt;code&gt;:set isfname?&lt;/code&gt;) we see this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@,48-57,/,.,-,_,+,,,#,$,%,~,=&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But &lt;code&gt;@&lt;/code&gt; here represents &amp;quot;alpha characters&amp;quot;, and to have the actual &lt;code&gt;@&lt;/code&gt; symbol included, one needs to add &lt;code&gt;@-@&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once that is done, it&#39;s just a question of determining:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the CAP Node.js project&#39;s root directory (with &lt;code&gt;vim.fs.root(0, &#39;package.json&#39;)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the location of the globally installed &lt;code&gt;@sap/cds-dk&lt;/code&gt; module, based on where the &lt;code&gt;cds&lt;/code&gt; executable can be found&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, &lt;code&gt;/node_modules&lt;/code&gt; is appended to each, and they&#39;re both passed to the &lt;code&gt;addpath&lt;/code&gt; function defined earlier.&lt;/p&gt;
&lt;p&gt;Once either or both these paths are in the &lt;code&gt;path&lt;/code&gt; option (depending on whether they exist or not), &lt;code&gt;gf&lt;/code&gt; based navigation can proceed successfully!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This was a quick configuration hack in an area of Neovim (well, Vim, I guess) that I hadn&#39;t previously much experience in. So it may need some more tweaking. But for now, it works well, as shown here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/08/neovim-nav.gif&quot; alt=&quot;navigation in Neovim&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In VS Code each newly navigated-to resource was opened in a separate tab by default. In Neovim they&#39;re opened in the same buffer, so to return to the previous resource in the &amp;quot;jump list&amp;quot; one can use &lt;code&gt;ctrl-o&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/posts/2025/08/04/excluding-specific-diagnostics-in-neovim/&quot;&gt;Excluding specific diagnostics in Neovim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Excluding specific diagnostics in Neovim</title>
    <link href="https://example.com/website/blog/2025-08-04-excluding-specific-diagnostics-in-neovim/" />
    <updated>2025-08-04T00:00:00Z</updated>
    <id>https://example.com/website/blog/2025-08-04-excluding-specific-diagnostics-in-neovim/</id>
    <content type="html">&lt;p&gt;Note: I&#39;m still learning (a) Lua, (b) the API surface of Neovim and (c) how the different core components interact and work together, so this may not be the best solution, but it works for me and I&#39;ve learned a lot digging in and putting it together.&lt;/p&gt;
&lt;p&gt;I recently revisited my Neovim config, with a view to updating and simplifying it with the advent of release 0.11. I covered some of this in my last Neovim related post &lt;a href=&quot;https://example.com/website/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;. In that context, when editing Node.js (JavaScript) files, everything worked nicely with regards to the Language Server and how the diagnostics were surfaced.&lt;/p&gt;
&lt;h2 id=&quot;a-desire-to-filter-out-a-specific-diagnostic&quot;&gt;A desire to filter out a specific diagnostic&lt;/h2&gt;
&lt;p&gt;That is, everything worked nicely ... with one annoyance - the hint level diagnostic &amp;quot;File is a CommonJS module&amp;quot; shown here on line 1:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;H   1 const cds = require(&#39;@sap/cds&#39;)     ■ File is a CommonJS module; it may be converted to an ES module.
    2 module.exports = cds.service.impl(function() {
    3   this.after(&#39;each&#39;, &#39;Books&#39;, book =&gt; {
    4     console.log(book
E   5   })     ■ &#39;,&#39; expected.
    6 })&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;For this sample display I&#39;d temporarily changed my preferred config so that all diagnostics are shown, as virtual text, rather than virtual lines, like this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua vim.diagnostic.config({virtual_lines = false, virtual_text = true})&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I wanted the language server to still publish diagnostics, but for me to be able to filter them.&lt;/p&gt;
&lt;h2 id=&quot;digging-into-the-neovim-docu&quot;&gt;Digging into the Neovim docu&lt;/h2&gt;
&lt;p&gt;In order to achieve this, I spent a pleasant morning today looking through the documentation and getting a better understanding of the API with respect to these features of Neovim (the links are to the documentation sections that are important here):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html&quot;&gt;Diagnostic framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;LSP client / framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lua.html&quot;&gt;Lua engine&lt;/a&gt; (including the &lt;code&gt;vim&lt;/code&gt; table-related functions)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-general-idea&quot;&gt;The general idea&lt;/h2&gt;
&lt;p&gt;Neovim has mechanisms for firing up language servers, connecting to them and making their features and functionality available in buffers. It also has facilities for managing diagnostics and surfacing them in different ways.&lt;/p&gt;
&lt;p&gt;With regards to diagnostics, a simplified flow between Neovim and a language server looks generally like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neovim attaches to a language server, sending the contents of the buffer to it for analysis&lt;/li&gt;
&lt;li&gt;The language server publishes hint, information, warning and error level diagnostics (via &lt;a href=&quot;https://code.visualstudio.com/api/language-extensions/programmatic-language-features#provide-diagnostics&quot;&gt;textDocument/publishDiagnostics&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;These diagnostics are stored in Neovim via a call to &lt;code&gt;vim.diagnostic.set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Depending on the configuration, the diagnostics are displayed appropriately in the buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I first went down the path of trying to add a filter in the last part (diagnostic display), I found that this was ultimately the wrong way to go about it, not least because I would have found myself having to override all the various diagnostic display affordances such as signs, virtual text, and so on.&lt;/p&gt;
&lt;p&gt;The key was to interrupt the &lt;em&gt;setting&lt;/em&gt; of the diagnostics so that I could filter some out before they were actually stored, which meant overriding &lt;code&gt;vim.diagnostic.set&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;examining-the-anatomy-of-a-diagnostic&quot;&gt;Examining the anatomy of a diagnostic&lt;/h2&gt;
&lt;p&gt;Understanding what a diagnostic looked like helped me enormously. In the JavaScript sample above, these two diagnostics are displayed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(H)INT 80001: File is a CommonJS module; it may be converted to an ES module.&lt;/li&gt;
&lt;li&gt;(E)RROR 1005: &#39;,&#39; expected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can look at what these are via &lt;code&gt;vim.diagnostic.get&lt;/code&gt;. Invoking this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua print(vim.diagnostic.get())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will just emit a table reference, something like this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;table: 0x68251cb7dca8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we can use the &lt;code&gt;vim.print&lt;/code&gt; function instead:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua vim.print(vim.diagnostic.get())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or even simply the &lt;code&gt;=&lt;/code&gt; mechanism:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua =vim.diagnostic.get()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this will cause a formatted display of the table contents:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    bufnr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1005&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#39;,&#39; expected.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    namespace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    user_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      lsp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1005&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#39;,&#39; expected.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    bufnr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;File is a CommonJS module; it may be converted to an ES module.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    namespace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    user_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      lsp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;File is a CommonJS module; it may be converted to an ES module.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I decided that I would want to filter on &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt;; the &lt;code&gt;source&lt;/code&gt; for both diagnostics here is &lt;code&gt;typescript&lt;/code&gt;, and the &lt;code&gt;code&lt;/code&gt; values are actually shown in the virtual text display already (&lt;code&gt;80001&lt;/code&gt; and &lt;code&gt;1005&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;how-diagnostics-are-set&quot;&gt;How diagnostics are set&lt;/h2&gt;
&lt;p&gt;Diagnostics find their way from the language server back into Neovim via &lt;code&gt;vim.diagnostic.set&lt;/code&gt; which &lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.set()&quot;&gt;has this signature&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;set({namespace}, {bufnr}, {diagnostics}, {opts})&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;I was curious as to what the namespace was; the value is shown as &lt;code&gt;7&lt;/code&gt; for both diagnostic records above; looking at the namespaces with &lt;code&gt;:lua =vim.api.nvim_get_namespaces()&lt;/code&gt; shows this:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  lazy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.hlyank&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.references&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.semantic_tokens&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.semantic_tokens:1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.signature_help&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.terminal.prompt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.treesitter.highlighter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.vim.lsp.javascript.1.diagnostic.signs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.vim.lsp.javascript.1.diagnostic.underline&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.vim.lsp.javascript.1.diagnostic.virtual_lines&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;vim.lsp.javascript.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which confirms that they&#39;re coming from the language server for TypeScript/JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;injecting-a-filter-into-vim-diagnostic-set&quot;&gt;Injecting a filter into vim.diagnostic.set&lt;/h3&gt;
&lt;p&gt;Once I understood this, I was able to create a simple module (it&#39;s my first real foray into custom modules, so I may be doing this suboptimally), in &lt;code&gt;~/.config/nvim/lua/qmacro/diagnostic.lua&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; M &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; original_vim_diagnostic_set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set

&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; filterbuilder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;-- if e.reason then&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;--   print(&#39;Filtering out&#39;, diagnostic.source, &#39;/&#39;, diagnostic.code, &#39;diagnostic -&#39;, e.reason)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;-- end&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

M&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exclude &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bufnr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; diagnostics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; filtered_diagnostics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tbl_filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filterbuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; diagnostics&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;original_vim_diagnostic_set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bufnr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filtered_diagnostics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; M&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;using-the-module&quot;&gt;Using the module&lt;/h3&gt;
&lt;p&gt;Before walking through this, I thought it would help to show how I want to call this, from within my &lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;qmacro.diagnostic&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;typescript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reason &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;yes I know already!&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In calling the &lt;code&gt;exclude&lt;/code&gt; function in this module, I can pass a table of exclude filters, each of which has a &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt; field, and an optional &lt;code&gt;reason&lt;/code&gt; field.&lt;/p&gt;
&lt;h3 id=&quot;a-walkthrough-of-the-module&quot;&gt;A walkthrough of the module&lt;/h3&gt;
&lt;p&gt;Now here&#39;s a brief breakdown of the module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I save the original &lt;code&gt;vim.diagnostic.set&lt;/code&gt; function in &lt;code&gt;original_vim_diagnostic_set&lt;/code&gt; so I can call it later&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;filterbuilder&lt;/code&gt; function takes a table of filters and produces a function (yes, I like higher order functions), specifically a predicate function, that can be then used with &lt;a href=&quot;https://neovim.io/doc/user/lua.html#vim.tbl_filter()&quot;&gt;vim.tbl_filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The predicate function produced also has some commented-out logging (that uses the optional &lt;code&gt;reason&lt;/code&gt; field from the filter entry) that I&#39;ll make good once I figure out the best way to log stuff cleanly and in accordance with standard levels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all that preparation, all that I then have to do is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Override the standard &lt;code&gt;vim.diagnostic.set&lt;/code&gt; function with one that injects a call to &lt;code&gt;vim.tbl_filter&lt;/code&gt; to remove any diagnostics that are caught by the exclude filters, before passing through the modified table and the rest of the original arguments to the original &lt;code&gt;vim.diagnostic.set&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&#39;s pretty much it.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This works for me so far, and getting to this stage has also taught me some more about Neovim&#39;s Lua API and various components.&lt;/p&gt;
&lt;p&gt;I added this setup to my Neovim configuration with &lt;a href=&quot;https://github.com/qmacro/dotfiles/commit/fb3272c121a5acd7610dc21aceb3a7bb53190257&quot;&gt;this commit to my dotfiles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Along with the Neovim documentation itself, the following resources helped clarify things in my mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://influentcoder.com/posts/nvim-diagnostics/&quot;&gt;Understanding Diagnostics in Neovim&lt;/a&gt; by Guillaume Humbert&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blob42.xyz/blog/neovim-diagnostic-filtering/&quot;&gt;Filtering Neovim Diagnostics&lt;/a&gt; by Chakib Benziane&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLep05UYkc6wTyBe7kPjQFWVXTlhKeQejM&quot;&gt;Advent of Neovim&lt;/a&gt; by TJ DeVries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/posts/2025/08/06/neovim-configuration-for-file-and-module-navigation-in-cds-models/&quot;&gt;Neovim configuration for file and module navigation in CDS models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>TASC Notes - Part 9</title>
    <link href="https://example.com/website/blog/2025-02-21-tasc-notes--part-9/" />
    <updated>2025-02-21T00:00:00Z</updated>
    <id>https://example.com/website/blog/2025-02-21-tasc-notes--part-9/</id>
    <content type="html">&lt;p&gt;For all resources related to this series, see the post &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/06/the-art-and-science-of-cap/&quot;&gt;The Art and Science of CAP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the start of &lt;a href=&quot;https://www.youtube.com/watch?v=Tz7TTM1pOIk&quot;&gt;this episode&lt;/a&gt; I take a little longer than usual to go through the &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/14/tasc-notes-part-8/&quot;&gt;notes to the previous part 8&lt;/a&gt; as there was so much that Daniel covered and it was worth spending time making sure we&#39;re all on the same page.&lt;/p&gt;
&lt;h2 id=&quot;whats-in-a-name&quot;&gt;What&#39;s in a name?&lt;/h2&gt;
&lt;p&gt;At &lt;a href=&quot;https://www.youtube.com/live/Tz7TTM1pOIk?t=1606&quot;&gt;26:46&lt;/a&gt; I finally give Daniel a chance to continue, picking up more or less where we left off last time, and that was with some query action.&lt;/p&gt;
&lt;p&gt;Starting with another variation on the queries from last time, Daniel goes for this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT ID, title, author.name as author from Books&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which produces:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Emily Brontë&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;207&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Charlotte Brontë&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While Mr Big might have said &amp;quot;&lt;a href=&quot;https://youtu.be/7pMWa33uVVE&quot;&gt;names is for tombstones baby&lt;/a&gt;&amp;quot; (a phrase which Daniel recalls, from a colleague, in &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/07/tasc-notes-part-7/&quot;&gt;part 7&lt;/a&gt;), names do a lot of lifting and abstracting. Let&#39;s dig in, with &lt;code&gt;author.name&lt;/code&gt; in this prefix projection clause here.&lt;/p&gt;
&lt;p&gt;We&#39;ve thought about this already in terms of one of the two main ways that CQL extends SQL, i.e. as a &lt;em&gt;path expression&lt;/em&gt;. Another term to use which Daniel introduces us to now is a &amp;quot;flattening&amp;quot; which makes a lot of sense, in that we can think of and treat the items in this projection (alternatively the &lt;em&gt;attributes&lt;/em&gt; in this &lt;em&gt;tuple&lt;/em&gt; shape construction) as flat, as along the same(attribute/tuple) plane. This is of course despite whatever SQL is required to actually realise this query expression - in particular a JOIN (the &lt;code&gt;.&lt;/code&gt; in the name gives us a clue to this respect).&lt;/p&gt;
&lt;p&gt;Talking of JOINs, we must note that, being a path expression, &lt;code&gt;author.name&lt;/code&gt; benefits from the concept of a &amp;quot;forward declared join&amp;quot; (&lt;code&gt;author&lt;/code&gt; represents the association). There&#39;s a brief mention of this concept in Capire for &lt;a href=&quot;https://cap.cloud.sap/docs/cds/cdl#associations&quot;&gt;associations in CDL&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Associations capture relationships between entities. They are like forward-declared joins added to a table definition in SQL.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There&#39;s also a longer explanation in the dropdown box within the &lt;a href=&quot;https://cap.cloud.sap/docs/about/best-practices#associations&quot;&gt;Associations&lt;/a&gt; section of the Best Practices topic in Capire.&lt;/p&gt;
&lt;p&gt;Like the concept of a &amp;quot;relvar&amp;quot;, this is something I initially struggled to grok. But having previously asked around internally and got some great help from lovely colleagues (thanks Patrice, Sebastian and Adrian)&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, I think of forward declared joins as a sort of more abstract &amp;quot;preamble&amp;quot; description of a relationship, that might likely be realised by a JOIN at the SQL level. Think of it as an expression of join opportunities with additional info on relationship qualification, i.e. ON conditions, which here are pulled from the managed associations used in the CDS model.&lt;/p&gt;
&lt;p&gt;So here &lt;code&gt;author.name&lt;/code&gt; becomes a JOIN and we are implicitly using the name &lt;code&gt;author&lt;/code&gt; as a table alias, referring to the &lt;code&gt;Authors&lt;/code&gt; table that has been joined; Daniel then switches to compile-to-SQL mode and &amp;quot;emits&amp;quot;:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
  ID&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  author&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; author
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; Books
&lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; Authors &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; author &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author_ID&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;from-to-one-to-to-many-associations&quot;&gt;From to-one to to-many associations&lt;/h2&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;+---------+                 +---------+
|  Books  | N [---------] 1 | Authors |
+---------+                 +---------+&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The association from &lt;code&gt;Books&lt;/code&gt; to &lt;code&gt;Authors&lt;/code&gt; is a to-one association, and the bi-directional partner is the to-many association from &lt;code&gt;Authors&lt;/code&gt; to &lt;code&gt;Books&lt;/code&gt; (head back to &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/14/tasc-notes-part-8/#relations-attributes-and-values&quot;&gt;Relations, attributes and values&lt;/a&gt; in the notes to part 8 for a reminder):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT ID, name, books.title as book from Authors&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point (around &lt;a href=&quot;https://www.youtube.com/live/Tz7TTM1pOIk?t=1870&quot;&gt;31:10&lt;/a&gt;) Daniel explains that the path expressions we&#39;ve seen, simply expressed based on associations as forward declared joins, played an important role in weaning folks off &lt;a href=&quot;https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping&quot;&gt;Object Relational Mapping&lt;/a&gt;, getting them to embrace query languages (SQL / CQL), by making it easy to express relationships like this ... without having to wrangle JOINs directly&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This new query which also has a path expression, this time based on the to-many association (forward declared join) going from &lt;code&gt;Authors&lt;/code&gt; to &lt;code&gt;Books&lt;/code&gt;, produces:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Emily Brontë&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuhering Heights&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Charlotte Brontë&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe how this &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/14/tasc-notes-part-8/#ad-hoc-relation&quot;&gt;ad hoc relation&lt;/a&gt; is &lt;a href=&quot;https://en.wikipedia.org/wiki/Denormalization&quot;&gt;denormalised&lt;/a&gt; - there is redundancy in the tuples owing to the 2 (many) &amp;quot;to-many&amp;quot;&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; association between Edgar Allen Poe and two of his books in the bookshop.&lt;/p&gt;
&lt;p&gt;This is the basis of how Daniel shows that CQL is a valid extension to SQL in terms of the Relational Model, remembering also the enhancement to allow non-scalar values in a result set, which we covered at the end of the previous part - see &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/14/tasc-notes-part-8/#the-universe-of-discourse-and-correlated-subqueries&quot;&gt;The universe of discourse and correlated subqueries&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;nesting-not-flattening&quot;&gt;Nesting not flattening&lt;/h3&gt;
&lt;p&gt;In the previous part we also learned about the &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/14/tasc-notes-part-8/#postfix-projections-and-set-theory&quot;&gt;postfix projection&lt;/a&gt; approach for queries, enabling us to express the desired tuple shape in a &lt;code&gt;{ ... }&lt;/code&gt; block that arguably better represents the concept we&#39;re aiming for. Here, that would be (in pseudocode&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Authors -&gt; { ID, name, books.title as book }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But now it&#39;s also much easier to think in terms of nesting, &amp;quot;un-flattening&amp;quot; &lt;code&gt;books.title&lt;/code&gt; thus:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT from Authors { ID, name, books { title as book } }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&#39;s returned is the same, from a nominal data perspective. But from a shape perspective what&#39;s returned is what we might refer to as &amp;quot;deep&amp;quot; and - as far it can refer to object structures - normalised (observe how there&#39;s now only one entry for Edgar Allen Poe, but with both books contained):&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Emily Brontë&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Charlotte Brontë&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a bonus side effect of all this hard work (abstraction, extension and dedicated conformance to the constraints of the Relational Model) CAP&#39;s support for relational and non-relational (object) persistence mechanisms is impressive.&lt;/p&gt;
&lt;h2 id=&quot;its-lookup-tables-all-the-way-down&quot;&gt;It&#39;s lookup tables all the way down&lt;/h2&gt;
&lt;p&gt;At around &lt;a href=&quot;https://www.youtube.com/live/Tz7TTM1pOIk?t=2112&quot;&gt;35:12&lt;/a&gt; Daniel take the opportunity to both double down on concepts and insights we&#39;ve covered before, and to drive them home. While still in the cds REPL, he &lt;a href=&quot;https://en.wiktionary.org/wiki/change_tack&quot;&gt;changes tack&lt;/a&gt; slightly and takes another look at the SQLite schema table, the same one that we looked at last week - see &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/14/tasc-notes-part-8/#exploring-in-sqlite&quot;&gt;Exploring in SQLite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This time, to add colour, he remains in the cds REPL (rather than switches to the SQLite REPL) and just uses CQL, because &amp;quot;why not?&amp;quot;. He also uses a slightly different form of &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-ql#constructing-queries&quot;&gt;query construction&lt;/a&gt; - the fluent API style:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sqlite.schema&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fluent &lt;span class=&quot;token constant&quot;&gt;API&lt;/span&gt; style&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;rather than the tagged template literal approach:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT from sqlite.schema&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;em&gt;Accessing the SQLite schema table here feels like finding a secret door to the private rooms in a posh hotel, a door that&#39;s been hiding in plain sight but I&#39;ve just not noticed it.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Being in the context of the cds REPL previously started with &lt;code&gt;cds r -r @capire/bookshop&lt;/code&gt;, with the CDS model compiled and deployed to the persistence layer (a SQLite in-memory database in this case), we see considerably more output than &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/14/tasc-notes-part-8/#exploring-in-sqlite&quot;&gt;our previous look&lt;/a&gt;. Thirty five entries in the schema, in the lookup table:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT from sqlite.schema&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -&gt; 35&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of these that Daniel highlights at random is:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;view&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;localized_CatalogService_Currencies&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  tbl_name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;localized_CatalogService_Currencies&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  rootpage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  sql&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;CREATE VIEW localized_CatalogService_Currencies AS SELECT&#92;n&#39; +
    &#39;  Currencies_0.name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&#92;n&#39; +
    &#39;  Currencies_0.descr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&#92;n&#39; +
    &#39;  Currencies_0.code&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&#92;n&#39; +
    &#39;  Currencies_0.symbol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&#92;n&#39; +
    &#39;  Currencies_0.minorUnit&#92;n&#39; +
    &#39;FROM localized_sap_common_Currencies AS Currencies_0&#39;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The point is that in the &amp;quot;universe of discourse&amp;quot; here, this entry in the lookup table is exactly what we&#39;ve been talking about - a relvar (&lt;code&gt;localized_CatalogService_Currencies&lt;/code&gt;, from the &lt;code&gt;name&lt;/code&gt; property) pointing to, being related to, a relation definition in the &lt;code&gt;sql&lt;/code&gt; property (&lt;code&gt;CREATE VIEW ...&lt;/code&gt;) to contain data.&lt;/p&gt;
&lt;p&gt;In other words, this database schema is a lookup table of relvars pointing to definitions, and queries relating to those definitions (of relations) have data returned as the &amp;quot;extent&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;universes-and-variables&quot;&gt;Universes and variables&lt;/h2&gt;
&lt;p&gt;In the universe of discourse that encapsulates queries, &lt;code&gt;Authors&lt;/code&gt; is a relvar (as it refer to a relation).&lt;/p&gt;
&lt;p&gt;But in another universe of discourse, that of CAP&#39;s &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-reflect#iterable&quot;&gt;LinkedDefinitions&lt;/a&gt;, &lt;code&gt;Authors&lt;/code&gt; is a variable but not a relvar; rather than refer to a relation (that can be queried), it refers to the definition at the CDS model level.&lt;/p&gt;
&lt;p&gt;Let&#39;s have a look, with the help of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;destructuring assignment&lt;/a&gt; (to a different variable name &lt;code&gt;Authors&lt;/code&gt; than the original property name &lt;code&gt;sap.capire.bookshop.Authors&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&#39;sap.capire.bookshop.Authors&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Authors &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;definitions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;Authors&lt;/code&gt; is now a variable, but not a relvar (as there&#39;s no relation, no queryable data, on the right hand side of the imaginary arrow):&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Authors
entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  kind: &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt;,
  includes: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;managed&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
  elements: LinkedDefinitions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    createdAt: Timestamp &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&#39;@cds.on.insert&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;=&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$now&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@UI.HiddenFilter&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@UI.ExcludeFromNavigationContext&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Core.Immutable&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@title&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;CreatedAt}&#39;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@readonly&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Timestamp&#39;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Core.Computed&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Common.Label&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;CreatedAt}&#39;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    createdBy: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&#39;@cds.on.insert&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;=&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$user&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@UI.HiddenFilter&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@UI.ExcludeFromNavigationContext&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Core.Immutable&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@title&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;CreatedBy}&#39;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@readonly&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@description&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;UserID.Description}&#39;&lt;/span&gt;,
      type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt;,
      length: &lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Core.Computed&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Common.Label&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;CreatedBy}&#39;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Core.Description&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;UserID.Description}&#39;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    modifiedAt: Timestamp &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&#39;@cds.on.insert&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;=&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$now&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@cds.on.update&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;=&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$now&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@UI.HiddenFilter&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@UI.ExcludeFromNavigationContext&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@title&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;ChangedAt}&#39;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@readonly&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Timestamp&#39;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Core.Computed&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Common.Label&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;ChangedAt}&#39;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    modifiedBy: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&#39;@cds.on.insert&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;=&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$user&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@cds.on.update&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;=&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$user&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@UI.HiddenFilter&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@UI.ExcludeFromNavigationContext&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@title&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;ChangedBy}&#39;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@readonly&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@description&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;UserID.Description}&#39;&lt;/span&gt;,
      type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt;,
      length: &lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Core.Computed&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Common.Label&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;ChangedBy}&#39;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Core.Description&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{i18n&gt;UserID.Description}&#39;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    ID: Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key: true, type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    name: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&#39;@mandatory&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true,
      type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt;,
      length: &lt;span class=&quot;token number&quot;&gt;111&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&#39;@Common.FieldControl&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Mandatory&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    dateOfBirth: Date &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Date&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    dateOfDeath: Date &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Date&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    placeOfBirth: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    placeOfDeath: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    books: Association &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Association&#39;&lt;/span&gt;,
      cardinality: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; max: &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      target: &lt;span class=&quot;token string&quot;&gt;&#39;sap.capire.bookshop.Books&#39;&lt;/span&gt;,
      on: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ref: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;books&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;author&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;=&#39;&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ref: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$self&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;relvars-and-queries-that-declare-relations-revisited&quot;&gt;Relvars and queries that declare relations (revisited)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/02/spiderman-authors.png&quot; alt=&quot;Two Spiderman characters looking at each other, with the word &amp;quot;Authors&amp;quot; below them&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Screenshot from &lt;a href=&quot;https://www.imdb.com/title/tt0824188/&quot;&gt;Double Identity&lt;/a&gt; (1967)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Just as we&#39;re reeling with wonder, Daniel introduces the denouement (at around &lt;a href=&quot;https://www.youtube.com/live/Tz7TTM1pOIk?t=2275&quot;&gt;37:58&lt;/a&gt;), subtly at first, by capturing a query in (assigning a query to) a variable (remember, &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/16/functions-as-first-class-citizens-in-sicp-lecture-1a/&quot;&gt;queries are first class citizens in CAP&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;authors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT from sap.capire.bookshop.Authors { ID, name, books { title as book } }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is &lt;code&gt;authors&lt;/code&gt; here? Well, it&#39;s a query, yes:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;cds.ql {
  SELECT: {
    from: { ref: [ &#39;sap.capire.bookshop.Authors&#39; ] },
    columns: [
      { ref: [ &#39;ID&#39; ] },
      { ref: [ &#39;name&#39; ] },
      {
        ref: [ &#39;books&#39; ],
        expand: [ { ref: [ &#39;title&#39; ], as: &#39;book&#39; } ]
      }
    ]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But it&#39;s &lt;em&gt;also a relvar&lt;/em&gt;, because as we learned in the previous part, &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/14/tasc-notes-part-8/#queries-declare-relations&quot;&gt;queries declare relations&lt;/a&gt; (even - or perhaps especially - those with &lt;code&gt;WHERE&lt;/code&gt; clauses; see the next section for an example of this).&lt;/p&gt;
&lt;p&gt;And because &lt;code&gt;authors&lt;/code&gt; is a relvar, we should be able to use it to make a query.&lt;/p&gt;
&lt;p&gt;Can we?&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course we can!&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Emily Brontë&#39;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Charlotte Brontë&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; book&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Boom!&lt;/p&gt;
&lt;p&gt;I don&#39;t know about you, but this is another beautiful moment, to see the depth to which CAP follows and is informed by the Relational Model. Reflecting on &lt;a href=&quot;https://wiki.c2.com/?RelationalModel&quot;&gt;what the original wiki has to say about the Relational Model&lt;/a&gt;&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; we see why this is important:&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;em&gt;It has been the foundation of most database software and theoretical database research ever since.&lt;/em&gt;&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See &lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#appendix-fully-qualified-names-and-reflected-variables&quot;&gt;Appendix - Fully qualified names and reflected variables&lt;/a&gt; for further information on this, including the reason this didn&#39;t work for Daniel during the live stream.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;defining-a-relvar-as-a-query-with-a-where-clause&quot;&gt;Defining a relvar as a query with a WHERE clause&lt;/h2&gt;
&lt;p&gt;Around &lt;a href=&quot;https://www.youtube.com/live/Tz7TTM1pOIk?t=2380&quot;&gt;39:40&lt;/a&gt;, answering my question on what we might call such relvars based on queries with &lt;code&gt;WHERE&lt;/code&gt; clauses, which are then used in queries with &lt;code&gt;WHERE&lt;/code&gt; clauses themselves, Daniel explains that these relvars are like views. And with their nest-able, or &amp;quot;reflexive&amp;quot; nature, we can have &amp;quot;views upon views upon views upon views ...&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/02/stack-of-turtles.jpg&quot; alt=&quot;a photo of a stack of turtles&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Turtles (or views) all the way down - &lt;a href=&quot;https://en.wikipedia.org/wiki/File:River_terrapin.jpg&quot;&gt;image courtesy of Pelf and Wikipedia&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here&#39;s an example of that. If we define a relvar &lt;code&gt;worksOfPoe&lt;/code&gt; (also directly &amp;quot;testing&amp;quot; it) thus:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; worksOfPoe &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds.ql &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;SELECT FROM $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Books&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID, title &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; WHERE author.name like &lt;span class=&quot;token string&quot;&gt;&#39;%Poe&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
cds.ql &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  SELECT: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    from: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ref: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sap.capire.bookshop.Books&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    columns: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ref: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ID&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ref: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;title&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,
    where: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ref: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;author&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;like&#39;&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; val: &lt;span class=&quot;token string&quot;&gt;&#39;%Poe&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; await worksOfPoe
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;The Raven&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Eleonora&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then we can think of this as a view, and use it like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; await SELECT.from&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;worksOfPoe&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.where&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;title like &lt;span class=&quot;token string&quot;&gt;&#39;The %&#39;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;The Raven&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;lazy-evaluation-and-late-materialisation&quot;&gt;Lazy evaluation and late materialisation&lt;/h2&gt;
&lt;p&gt;Let&#39;s go back briefly to a key source of inspiration for CAP, functional programming. There&#39;s a particular aspect of functional programming that we haven&#39;t mentioned much in this series, and that is &lt;a href=&quot;https://en.wikipedia.org/wiki/Lazy_evaluation&quot;&gt;lazy evaluation&lt;/a&gt;, introduced in the contexts of lambda calculus and programming languages in the 1970&#39;s. Lazy (or &amp;quot;delayed&amp;quot;) evaluation is where an expression is not evaluated as soon as it&#39;s defined and bound to a variable; the evaluation is delayed until a value is actually required.&lt;/p&gt;
&lt;p&gt;As Daniel mentions, this is a valuable approach for views in this context too, especially if we have a view defined on a view defined on a view (ad nauseam, if not ad infinitum&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;). The individual materialisation of just one of those views, especially towards the bottom of the stack, might be hundreds of columns (ahem, attributes) but the amalgamated construct of all the views might be just a couple.&lt;/p&gt;
&lt;p&gt;Because of late materialisation, the Relational Model equivalent of lazy evaluation, this makes it possible for the engine to perform more efficiently, and ultimately only have to reify tuples consisting of just those two attributes.&lt;/p&gt;
&lt;h2 id=&quot;projections-selections-and-infix-notation&quot;&gt;Projections, selections and infix notation&lt;/h2&gt;
&lt;p&gt;Continuing at &lt;a href=&quot;https://www.youtube.com/live/Tz7TTM1pOIk?t=2554&quot;&gt;42:34&lt;/a&gt;, Daniel enters this into his cds REPL to lay the foundation for explaining infix filters:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors {
      ID, name, books {
        ID, title
      }
    }
    WHERE ID &gt;= 150
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;For longer examples like this that use the backtick construct (&lt;code&gt;`...`&lt;/code&gt;), I&#39;m experimenting with conveying them across multiple lines; let me know if this makes it easier. By the way, I try to ensure that they&#39;re still executable as-is if you copy and paste them (thanks to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#multi-line_strings&quot;&gt;support of multi-line strings in template literals&lt;/a&gt;). I&#39;m also thinking of capitalising the CQL keywords as I&#39;ve done here. Let me know what you think about this too, and what your preference is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But first, why don&#39;t we take the opportunity to &lt;a href=&quot;https://example.com/website/blog/posts/2017/02/19/the-beauty-of-recursion-and-list-machinery/#initial-recognition&quot;&gt;stare at&lt;/a&gt; this CQL statement and practise getting the terminology right? I find that knowing and using the right terms for technical concepts&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; really helps form solid synaptic connections and is the basis for better understanding and communication.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;{ ID, name, books { ID, title } }&lt;/code&gt; is a &lt;strong&gt;projection&lt;/strong&gt; and &lt;code&gt;where ID &amp;gt;= 150&lt;/code&gt; is a &lt;strong&gt;selection&lt;/strong&gt; of the &lt;code&gt;Authors&lt;/code&gt; &lt;strong&gt;relation&lt;/strong&gt; (or perhaps even more precisely of the &lt;strong&gt;relation&lt;/strong&gt; referred to with the &lt;code&gt;Authors&lt;/code&gt; &lt;strong&gt;relvar&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Projections and selections are the two major operations in the Relational Model.&lt;/p&gt;
&lt;p&gt;Next, &lt;code&gt;{ ID, title }&lt;/code&gt; is also a &lt;strong&gt;projection&lt;/strong&gt;, of the &lt;strong&gt;relation&lt;/strong&gt; referred to via the &lt;code&gt;books&lt;/code&gt; &lt;strong&gt;relvar&lt;/strong&gt;. What Daniel also refers to as an &amp;quot;inner relation&amp;quot;. Note that even though it only has a single component, &lt;code&gt;books&lt;/code&gt; here is also a &lt;strong&gt;path expression&lt;/strong&gt; (see &lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#from-to-one-to-to-many-associations&quot;&gt;From to-one to to-many associations&lt;/a&gt; earlier). Note that the &lt;strong&gt;projection&lt;/strong&gt; &lt;code&gt;{ ID, title }&lt;/code&gt; qualifying that relation is a &lt;strong&gt;&lt;em&gt;postfix&lt;/em&gt; projection&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, with that out of the way, let&#39;s dig in to what this section is really about, and that is the concept of &lt;strong&gt;infix filters&lt;/strong&gt;, a syntactic solution, in a way, to finding the right balance between clarity and understanding at the CQL expression level and how much work the compiler has to do (and how much chance there is for an error to occur) to turn the CQL into something the persistence layer can execute. We touched on &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/13/tasc-notes-part-5/#infix-filters&quot;&gt;infix filters in the notes to part 5 of this series&lt;/a&gt; and Daniel gives us an example of an infix filter here.&lt;/p&gt;
&lt;p&gt;First, let&#39;s look at what the query above returns, which is:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to restrict the output to only show the books that had &lt;code&gt;ID&lt;/code&gt; values greater than 251 (effectively excluding &amp;quot;The Raven&amp;quot; here) then we might think that this would be the approach, with a selection - a &lt;code&gt;where&lt;/code&gt; clause (&lt;code&gt;where ID &amp;gt; 251&lt;/code&gt;) - directly following the nested projection:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors {
      ID, name, books {
        ID, title
      }
      WHERE ID &gt; 251
    }
    WHERE ID &gt;= 150
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this is incorrect!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this would present problems (and possible ambiguities) for the compiler, this is not the way.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is the way:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors {
      ID, name, books[ID &gt; 251] {
        ID, title
      }
    }
    WHERE ID &gt;= 150
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which produces:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s actually an optional &lt;code&gt;where&lt;/code&gt; keyword that can be used here for clarity, if you wish, i.e. &lt;code&gt;books [where ID &amp;gt; 251]&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;In fact, the infix construct &lt;code&gt;[ ... ]&lt;/code&gt; allows for not only filters, but other query result mechanisms, such as ordering (note here that to get back both books for Poe being returned, the filter was changed from &lt;code&gt;ID &amp;gt; 251&lt;/code&gt; to &lt;code&gt;ID &amp;gt; 250&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors {
      ID, name, books[where ID &gt; 251 order by title desc] {
        ID, title
      }
    }
    WHERE ID &gt;= 150 order by name desc
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(This doesn&#39;t currently work as expected, due to some issues. Watch this space!)&lt;/p&gt;
&lt;h3 id=&quot;closures-and-the-universes-of-discourse&quot;&gt;Closures and the universes of discourse&lt;/h3&gt;
&lt;p&gt;At &lt;a href=&quot;https://www.youtube.com/live/Tz7TTM1pOIk?t=2727&quot;&gt;45:27&lt;/a&gt;, in the context of these CQL statements we&#39;ve just been playing around with, Daniel declares something that is obvious when we think about it for a second, but is still necessary to say out loud:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Authors&lt;/code&gt; and &lt;code&gt;books&lt;/code&gt; are path expressions&lt;/li&gt;
&lt;li&gt;The &amp;quot;path&amp;quot; part of a path expression always has to start somewhere&lt;/li&gt;
&lt;li&gt;That &amp;quot;somewhere&amp;quot; is a universe of discourse, or scope&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;books&lt;/code&gt; it is &lt;code&gt;Authors&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Authors&lt;/code&gt; it is ... &lt;em&gt;the schema&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and yes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;These enclosing relationships and references are indeed &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/14/tasc-notes-part-8/#a-closure-easter-egg&quot;&gt;similar to closures&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;its-all-just-a-path-game&quot;&gt;&amp;quot;It&#39;s all just a path game&amp;quot;&lt;/h3&gt;
&lt;p&gt;Moving back to the infix notation briefly, Daniel illustrates that &amp;quot;it&#39;s all just a path game&amp;quot;, and in fact the outermost &lt;code&gt;WHERE&lt;/code&gt; clause (the selection) on &lt;code&gt;Authors&lt;/code&gt; could be expressed using infix notation too:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors[ID &gt;= 150] {
      ID, name, books[ID &gt; 251] {
        ID, title
      }
    }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perhaps we should revisit our &amp;quot;definition&amp;quot; of &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/13/tasc-notes-part-5/#cql-sql&quot;&gt;CQL &amp;gt; SQL&lt;/a&gt; to add a third enhancement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;associations and path expressions&lt;/li&gt;
&lt;li&gt;nested projections&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;infix filters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What fills me with wonder and amazement at this point is that what we think therefore might be possible, extrapolating from what we&#39;ve learned thus far in this context ... &lt;strong&gt;is&lt;/strong&gt; actually possible.&lt;/p&gt;
&lt;p&gt;This does remind me of one adage that is a tagline of Perl, which is that it &amp;quot;&lt;em&gt;makes easy things easy and hard things possible&lt;/em&gt;&amp;quot;. This is of course from the great &lt;a href=&quot;https://en.wikipedia.org/wiki/Larry_Wall&quot;&gt;Larry Wall&lt;/a&gt;&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;, and possibly originally from the equally great &lt;a href=&quot;https://en.wikipedia.org/wiki/Alan_Kay&quot;&gt;Alan Kay&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.collinsdictionary.com/dictionary/english/to-wit&quot;&gt;To wit&lt;/a&gt;: being &amp;quot;all just a path game&amp;quot;, we can stretch these path expressions to hop between associations as we see fit(this is a slightly simplified version based on what Daniel used):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors[ID &gt;= 150] {
      name, books.authors.books {
        title
      }
    }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces a sort of hybrid of &lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#nesting-not-flattening&quot;&gt;nesting and flattening&lt;/a&gt;, with the nesting coming from the postfx projection (&lt;code&gt;books { title }&lt;/code&gt;) and the flattening from the rest of the extended path expression (&lt;code&gt;books.authors.books&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s refresh our memories on this CDS model:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books : {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
  title  : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  author : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to Authors&lt;/span&gt;;
}

&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Authors : {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
  name  : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  books : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to many Books&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; books.author = $self;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we look at Mr Poe and his two works, we can clearly see the effect of both. With the nesting, the two books are returned within the one author: &lt;code&gt;[ { title: &#39;The Raven&#39; }, { title: &#39;Eleonora&#39; } ]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the flattening, the author has been denormalised due to the to-many association (&lt;code&gt;books.&lt;/code&gt;) section within the extended path expression:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we go crazy and do this, in the interests of science:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors[ID &gt;= 150] {
      name, books.author.books.author.books {
        title
      }
    }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we get double the number of records for Mr Poe, as we&#39;ve followed the to-many association twice through (in the path expression, i.e. not including the postfix projection):&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Did you notice the subtle but ultimately vast convenience of the &lt;a href=&quot;https://cap.cloud.sap/docs/guides/domain-modeling#naming-conventions&quot;&gt;as yet unwritten&lt;/a&gt; convention of naming elements in the singular or plural according to the cardinality of the association? In constructing or reading the extended path expression &lt;code&gt;books.author...&lt;/code&gt; we instinctively know that &lt;code&gt;books.&lt;/code&gt; represents a to-many association but &lt;code&gt;author.&lt;/code&gt; represents a to-one association.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;you-re-supposed-to-vote-for-my-preference&quot;&gt;&amp;quot;You&#39;re supposed to vote for &lt;em&gt;my&lt;/em&gt; preference!&amp;quot;&lt;/h3&gt;
&lt;p&gt;One way to bring the data back cleanly is to include the &lt;code&gt;DISTINCT&lt;/code&gt; keyword; and here we get an insight into the inner workings of the CAP team; what seems on the surface like trivial minutiae - where to allow the placement of such a keyword - is, like everything else, an important discussion that will have ramifications long after the discussion is done.&lt;/p&gt;
&lt;p&gt;Currently there are two options being debated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Daniel prefers the &lt;code&gt;DISTINCT&lt;/code&gt; to follow the &lt;code&gt;SELECT&lt;/code&gt; statement directly, as in &lt;code&gt;SELECT DISTINCT FROM Authors ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The compiler team prefer it after the relvar and projection, as in &lt;code&gt;SELECT FROM Authors { ... } DISTINCT ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Right now, the compiler team have the edge, thus:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors[ID &gt;= 150] DISTINCT {
      name, books.author.books.author.books {
        title
      }
    }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which produces:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books_author_books_author_books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On playfully expressing a preference for this, I am reprimanded by Daniel. And rightly so ;-)&lt;/p&gt;
&lt;h3 id=&quot;expressing-paths-in-the-from-clause&quot;&gt;Expressing paths in the FROM clause&lt;/h3&gt;
&lt;p&gt;Not only are path expressions possible in projections, but also even in &lt;code&gt;FROM&lt;/code&gt; clauses, as Daniel illustrates next (at around &lt;a href=&quot;https://www.youtube.com/live/Tz7TTM1pOIk?t=3194&quot;&gt;53:14&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM sap.capire.bookshop.Authors:books {
      ID, title
    }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which produces:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;207&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far we have seen the use of the period &lt;code&gt;.&lt;/code&gt; to join parts of a path expression together. But in the context of a &lt;code&gt;FROM&lt;/code&gt; clause, where we are normally specifying entity names, which can be fully qualified and therefore contain periods (e.g. with a namespace prefix, like here: &lt;code&gt;sap.capire.bookshop.Authors&lt;/code&gt;), we must use a different character - the colon &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that the example above was just to illustrate this contrast between the use of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt;; you can of course also just say:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors:books {
      ID, title
    }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the &lt;a href=&quot;https://cap.cloud.sap/docs/cds/cql#path-expressions&quot;&gt;Path Expressions&lt;/a&gt; section of the CQL topic in Capire for further information on this.&lt;/p&gt;
&lt;h3 id=&quot;understanding-path-intent-and-realisation&quot;&gt;Understanding path intent and realisation&lt;/h3&gt;
&lt;p&gt;At &lt;a href=&quot;https://www.youtube.com/live/Tz7TTM1pOIk?t=3291&quot;&gt;54:51&lt;/a&gt;, building on this newfound ability to express paths in the &lt;code&gt;FROM&lt;/code&gt; clause, Daniel reminds us that with great power comes great responsibility. While it&#39;s easy to create CQL queries that get you what you (ostensibly) want, you should always be aware of the implicit intent of the expression, and how it&#39;s realised underneath.&lt;/p&gt;
&lt;p&gt;Here&#39;s an example. At this point in time, the query we just executed (written in-line again so we can compare it more easily with the next one):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT FROM Authors:books { ID, title }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces this:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;207&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By way of comparison, this query:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT FROM Books { ID, title }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;also produces the same.&lt;/p&gt;
&lt;p&gt;The difference becomes evident when we add a new book:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; await INSERT.into&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Books, &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title: &lt;span class=&quot;token string&quot;&gt;&#39;Robin of Sherwood&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
InsertResult &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; results: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; changes: &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;, lastInsertRowid: &lt;span class=&quot;token number&quot;&gt;272&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the &lt;code&gt;SELECT FROM Books { ID, title }&lt;/code&gt; includes this new book in the result set:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;207&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;272&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Robin of Sherwood&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the one with the path expression in the &lt;code&gt;FROM&lt;/code&gt; clause (&lt;code&gt;SELECT FROM Authors.books { ID, title }&lt;/code&gt;) does not!&lt;/p&gt;
&lt;p&gt;Why? Well, consider what we inserted, and what we didn&#39;t, plus what the root of the path expression &lt;code&gt;Authors.books&lt;/code&gt; is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the root of the path expression is &lt;code&gt;Authors&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the insertion target was &lt;code&gt;Books&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the relation between a book and its author is via the &lt;code&gt;author_ID&lt;/code&gt; foreign key on &lt;code&gt;Books&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;but we didn&#39;t include any value for &lt;code&gt;author_ID&lt;/code&gt; (spot the &lt;code&gt;null&lt;/code&gt; value)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; await cds.ql &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;SELECT FROM Books &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID, title, author_ID &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Wuthering Heights&#39;&lt;/span&gt;, author_ID: &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;207&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Jane Eyre&#39;&lt;/span&gt;, author_ID: &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;The Raven&#39;&lt;/span&gt;, author_ID: &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Eleonora&#39;&lt;/span&gt;, author_ID: &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Catweazle&#39;&lt;/span&gt;, author_ID: &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;272&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Robin of Sherwood&#39;&lt;/span&gt;, author_ID: null &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So following the path from &lt;code&gt;Authors&lt;/code&gt; along the &lt;code&gt;books&lt;/code&gt; association will not reach any tuple corresponding to this new insertion! But that&#39;s the point - the &lt;em&gt;intent&lt;/em&gt; implicit in each of these paths is very different:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all the books in the &lt;code&gt;Books&lt;/code&gt; relation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all the books that are reached from entries in the &lt;code&gt;Authors&lt;/code&gt; relation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, we can &amp;quot;fix&amp;quot; the missing link like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; await UPDATE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Books&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.set&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; author_ID:170 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.where&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID:272 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the result that we can now find the book if we start from the authors:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; await cds.ql &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;SELECT FROM Authors:books &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID, title &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Wuthering Heights&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;207&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Jane Eyre&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;The Raven&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Eleonora&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Catweazle&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;272&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Robin of Sherwood&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice!&lt;/p&gt;
&lt;p&gt;By the way, as you have probably guessed by now, the constructs we&#39;ve seen can be combined pretty much arbitrarily, and Daniel shows this with a final example along this route:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; await cds.ql &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;SELECT FROM Authors&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name like &lt;span class=&quot;token string&quot;&gt;&#39;%Poe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;:books &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID, title &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;The Raven&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Eleonora&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&#39;s combined is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a path expression&lt;/li&gt;
&lt;li&gt;an infix filter&lt;/li&gt;
&lt;li&gt;a postfix projection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and it all Just Works™️.&lt;/p&gt;
&lt;p&gt;Daniel then riffed on extending the path expression as we saw earlier (see &lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#its-all-just-a-path-game&quot;&gt;&amp;quot;It&#39;s all just a path game&amp;quot;&lt;/a&gt;), showing how we can force the traversal round and round the associations, but to round this off here&#39;s something slightly different - adding a path expression to the postfix projection to &amp;quot;go around&amp;quot; in that way:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors[where name like &#39;%Poe&#39;]:books {
      ID, title, author.name
    }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author_name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author_name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From &lt;code&gt;Authors&lt;/code&gt; &lt;em&gt;down&lt;/em&gt; the &lt;code&gt;books&lt;/code&gt; to-many association and &lt;em&gt;back up&lt;/em&gt; the &lt;code&gt;author&lt;/code&gt; to-one association for the author&#39;s name.&lt;/p&gt;
&lt;p&gt;And as a reminder, what would happen if we went the other way?&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Books:author[name like &#39;%Poe&#39;] {
      ID, name, books.title
    }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; books_title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; books_title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Makes sense, right? (And check out that infix filter &lt;em&gt;on the association&lt;/em&gt;!)&lt;/p&gt;
&lt;p&gt;But note that the author name is denormalised. Flattened. Let&#39;s finish this off by reminding ourselves of how we avoid that, with a &lt;em&gt;nested&lt;/em&gt; projection:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  SELECT
    FROM Authors[where name like &#39;%Poe&#39;] {
      ID, name, books {
        ID, title
      }
    }
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;

which returns&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;`json
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Edgar Allen Poe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;The Raven&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Eleonora&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;back-to-the-root-s&quot;&gt;Back to the root(s)&lt;/h2&gt;
&lt;p&gt;We are almost at the end of the episode, but Daniel has a reward for those of us who made it all the way.&lt;/p&gt;
&lt;p&gt;What is that reward? Well, the move back along the axis from Science to Art, in a way, revisiting the notional top level &lt;code&gt;Schema&lt;/code&gt; entity presented at the end of part 7 - see &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/07/tasc-notes-part-7/#wrapping-up-with-relational-algebra&quot;&gt;Wrapping up with relational algebra&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I did debate with myself whether it was from Science to Art, or from Art to Science, but it&#39;s a reward for us nonetheless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Earlier in these notes we dwelled briefly on the fact that &amp;quot;above&amp;quot; every domain entity there&#39;s the &lt;code&gt;Schema&lt;/code&gt;; see the earlier sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#its-lookup-tables-all-the-way-down&quot;&gt;It&#39;s lookup tables all the way down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#closures-and-the-universes-of-discourse&quot;&gt;Closures and the universes of discourse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This has largely been notional, but the reward is to see Daniel make it real. How? With a deft CDL flavoured flick of the wrist, as hinted at at the end of part 7, but now as something we have a much better chance of understanding.&lt;/p&gt;
&lt;p&gt;Here&#39;s a version of what was shown in part 7 that you can try at home. First, clone the &lt;a href=&quot;https://github.com/SAP-samples/cloud-cap-samples&quot;&gt;cloud-cap-samples&lt;/a&gt; repo and change directory into it:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone https://github.com/SAP-samples/cloud-cap-samples &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; cloud-cap-samples&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then create a file &lt;code&gt;schema.cds&lt;/code&gt; containing:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop.Books &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; books } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;@capire/bookshop&#39;;
&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop.Authors &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; authors } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;@capire/bookshop&#39;;

&lt;span class=&quot;token annotation important&quot;&gt;@singleton&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Schema {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID   : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;; &lt;span class=&quot;token single-line-comment comment&quot;&gt;// just to make it a valid DDL&lt;/span&gt;
  Books    : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to many books&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; 1=1;
  Authors  : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to many authors&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; 1=1;
}&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Here, we now have a &lt;em&gt;singleton&lt;/em&gt; (&amp;quot;&lt;a href=&quot;https://www.youtube.com/watch?v=HEQt_2EBV8A&quot;&gt;Es kann nur einen geben!&lt;/a&gt;&amp;quot;) &lt;code&gt;Schema&lt;/code&gt;, representing the entire context in which our domain entities are resolved.&lt;/p&gt;
&lt;p&gt;In fact, the relationship here from &lt;code&gt;Schema&lt;/code&gt; to &lt;code&gt;Authors&lt;/code&gt; as an association is as if we&#39;ve bumped up the entity-ness one level higher (to &lt;code&gt;Schema&lt;/code&gt;) and proved that the &lt;code&gt;Authors&lt;/code&gt; entity can actually act as an association in this top level universe of discourse.&lt;/p&gt;
&lt;p&gt;Also note that the &lt;code&gt;1=1&lt;/code&gt; is a bit like saying &amp;quot;true in all cases&amp;quot; for the predicate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now fire up the cds REPL with the &lt;code&gt;--run&lt;/code&gt; option pointing to the current directory (which should therefore see the engine pick up this &lt;code&gt;schema.cds&lt;/code&gt; file):&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ cds r &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
Welcome to cds repl &lt;span class=&quot;token function&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8.7&lt;/span&gt;.2
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - loaded model from &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;:

  schema.cds
  bookshop/index.cds
  bookshop/srv/user-service.cds
  bookshop/srv/cat-service.cds
  bookshop/srv/admin-service.cds
  bookshop/db/schema.cds
  node_modules/@sap/cds/common.cds

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

------------------------------------------------------------------------
Following variables are made available &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; your repl&#39;s global context:

from cds.entities: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Schema,
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

from cds.services: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  db,
  CatalogService,
  AdminService,
  UserService,
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Simply &lt;span class=&quot;token builtin class-name&quot;&gt;type&lt;/span&gt; e.g. UserService &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the prompt to use the respective objects.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the cds REPL, try this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT FROM Schema:Authors&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// just like &amp;lt;deity&gt; ultimately intended&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, what&#39;s the outcome? At first, a little underwhelming:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But with the understanding we&#39;ve gained from this episode, we know how things work in theory (associations between relations) and practice (how the compiler will form the appropriate SQL statement out of whatever expressions of art and ideals we choose to make in our CQL explorations of that theory).&lt;/p&gt;
&lt;p&gt;And what&#39;s missing becomes clear when we allow our minds to chew things over&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;: &lt;em&gt;There&#39;s no data at the &lt;code&gt;Schema&lt;/code&gt; level, i.e. nothing in the &amp;quot;lookup table&amp;quot;, so there&#39;s going to be no chance of even getting started to follow that to-many association path down to &lt;code&gt;Authors&lt;/code&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So remedy that (and in fact this remedy was hiding in plain sight when Daniel &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/07/tasc-notes-part-7/#wrapping-up-with-relational-algebra&quot;&gt;first introduced it in part 7&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Schema&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(even passing an empty object &lt;code&gt;{}&lt;/code&gt; to &lt;code&gt;INSERT&lt;/code&gt; would work here)&lt;/p&gt;
&lt;p&gt;Now try that again (reducing the output with a postfix projection):&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;select from Schema:Books { title }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bingo!&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;💥&lt;/p&gt;
&lt;p&gt;The CDS model, and CQL as its language, is really based on decades of theory and practice, and we all benefit.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That&#39;s the end of the notes for this episode. If you made it all the way here, please put a comment below to tell me, and thank you for reading!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;appendix-fully-qualified-names-and-reflected-variables&quot;&gt;Appendix - Fully qualified names and reflected variables&lt;/h2&gt;
&lt;p&gt;In Daniel&#39;s demo the unqualified &lt;code&gt;Authors&lt;/code&gt; entity name was used, which is why it didn&#39;t work&lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#footnotes&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; at the time. The fully qualified name &lt;code&gt;sap.capire.bookshop.Authors&lt;/code&gt; is needed.&lt;/p&gt;
&lt;p&gt;If this is too cumbersome, remember that you have the automatically reflected entities in the cds REPL:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Following variables are made available in your repl&#39;s global context:

from cds.entities: {
  Books,
  Authors,
  Genres,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;authors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT from &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Authors&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; { ID, name, books { title as book } }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would work nicely too (noting here that &lt;a href=&quot;https://example.com/website/blog/2025-02-21-tasc-notes--part-9/#universes-and-variables&quot;&gt;we redefined the value for &lt;code&gt;Authors&lt;/code&gt; earlier&lt;/a&gt;, but to the same value :-)).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;footnotes&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You might also be interested to know that forward declared joins are a core part of &lt;a href=&quot;https://patents.google.com/patent/US10599650B2/en&quot;&gt;patent US10599650B2 &amp;quot;Enhancements for forward joins expressing relationships&amp;quot;&lt;/a&gt;, on which Daniel is named as a co-inventor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The thought of moving away from query languages towards ORMs and the complexities that come with them &amp;quot;merely&amp;quot; because of the struggle with JOIN syntax reminds me of the classic &lt;a href=&quot;https://en.wikipedia.org/wiki/Jamie_Zawinski&quot;&gt;Jamie Zawinski&lt;/a&gt; quote: &lt;em&gt;Some people, when confronted with a problem, think &amp;quot;I know, I&#39;ll use regular expressions&amp;quot;. Now they have two problems&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sorry, I couldn&#39;t resist that juxtaposition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pseudocode yes but also deliberately expressed to remind ourselves of what a relvar (&lt;code&gt;Authors&lt;/code&gt; in this case) is, i.e. something that points (&lt;code&gt;-&amp;gt;&lt;/code&gt;) to a relation (here represented by an ad hoc set of attributes).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not because of any breakage in the &amp;quot;infer&amp;quot; code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yes, I couldn&#39;t resist referencing the Cunningham &amp;amp; Cunningham wiki, the home of the creator of the wiki Ward Cunningham and indeed &lt;a href=&quot;https://example.com/website/blog/posts/2024/11/29/tasc-notes-part-3/&quot;&gt;already mentioned in the notes to part 3 of this series&lt;/a&gt; too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once a Classics (Latin &amp;amp; Greek) scholar, always a Classics scholar, natch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://example.com/website/blog/posts/2024/01/22/accuracy-and-precision-in-language/&quot;&gt;Beyond the basics, with which folks still seem to be struggling&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whom I&#39;ve met a couple of times in my erstwhile role as speaker at the fantastic Foo Camp, Perl Conferences and Open Source Convention (OSCON) conferences, and as member of the Perl community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was the end of the day and I struggled a little with this, until I took a nap. And I woke up with the answer, realising what problem had been!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
</content>
  </entry>
  <entry>
    <title>TASC Notes - Part 8</title>
    <link href="https://example.com/website/blog/2025-02-14-tasc-notes--part-8/" />
    <updated>2025-02-14T00:00:00Z</updated>
    <id>https://example.com/website/blog/2025-02-14-tasc-notes--part-8/</id>
    <content type="html">&lt;p&gt;For all resources related to this series, see the post &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/06/the-art-and-science-of-cap/&quot;&gt;The Art and Science of CAP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FF1NzLwsmos&quot;&gt;This episode&lt;/a&gt; started with me rambling slightly more than usual as I attempted to locate Daniel, but &lt;a href=&quot;https://youtu.be/AyS5cHO6JN0&quot;&gt;suddenly, as if by magic, the shopkeeper appeared&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/02/the-shopkeeper-appeared.png&quot; alt=&quot;still image from the classic start scene in Mr Benn&quot;&gt;&lt;/p&gt;
&lt;p&gt;(This is the usual start scene from &lt;a href=&quot;https://en.wikipedia.org/wiki/Mr_Benn&quot;&gt;Mr Benn&lt;/a&gt;, one of my favourite TV programmes as a young child in the early 1970&#39;s, and the phrase above has stuck in my mind ever since).&lt;/p&gt;
&lt;p&gt;We took slightly longer to review and discuss &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/07/tasc-notes-part-7/&quot;&gt;the notes on the previous episode (part 7)&lt;/a&gt;, as there were some super eye openers that were worth revisiting, not least the beautiful reveal of the parallel between functional programming and aspect oriented techniques, and the proper way to extend entities.&lt;/p&gt;
&lt;h2 id=&quot;the-relational-model&quot;&gt;The relational model&lt;/h2&gt;
&lt;p&gt;At &lt;a href=&quot;https://www.youtube.com/live/FF1NzLwsmos?t=1430&quot;&gt;23:50&lt;/a&gt; Daniel dives back into where we left off in the previous episode, to dwell a little on some important theory in the form of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_model&quot;&gt;Relational Model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At first glance, this seems like hard and somewhat dry theory, but it&#39;s important for the foundations of CAP, and while it may not help us in our day to day application development work, it will help us build a solid basis of understanding. It&#39;s equally if not more important for Daniel and the CAP team building out the framework to ensure that - in and of itself - CAP follows sensible principles that have come before, that have arisen from the hard graft of our large-brained computing predecessors.&lt;/p&gt;
&lt;p&gt;In particular, Daniel wanted to ensure that the extensions to SQL making CQL a superset, in particular nested projections and path expressions, still conformed to the Relational Model approach to data modelling, storage and retrieval.&lt;/p&gt;
&lt;h3 id=&quot;what-is-a-relvar&quot;&gt;What is a relvar?&lt;/h3&gt;
&lt;p&gt;I struggled initially to properly grok the meaning and significance of the term &amp;quot;relvar&amp;quot;. Building on the context ably set by Daniel in this episode, I found my curiosity getting the better of me (as it always does) and embarked upon a voyage of discovery, starting at that &lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_model&quot;&gt;Relational Model&lt;/a&gt; Wikipedia page.&lt;/p&gt;
&lt;p&gt;What moved me closer to understanding &amp;quot;relvar&amp;quot; was to realise that the terms I&#39;ve always used for artifacts and concepts in relational database systems and operations ... are not entirely formal. A relvar, short for relation variable, is from the strictly formal terminology set where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tables (or views) are called &lt;em&gt;relations&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;a table&#39;s columns (fields) are called &lt;em&gt;attributes&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;records (or rows) are called &lt;em&gt;tuples&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consequently, a name referring to a table (a relation), such as &amp;quot;Customers&amp;quot;, or &amp;quot;Foo&amp;quot; is called a &lt;em&gt;relation variable&lt;/em&gt;. This is clarified in the Wikipedia page &lt;a href=&quot;https://www.oreilly.com/library/view/relational-theory-for/9781449365431/&quot;&gt;with reference to Date&lt;/a&gt;, thus:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At any given time, all information in the database is represented solely by values within &lt;strong&gt;tuples&lt;/strong&gt;, corresponding to &lt;strong&gt;attributes&lt;/strong&gt;, in &lt;strong&gt;relations&lt;/strong&gt; identified by relvars&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(emphasis mine).&lt;/p&gt;
&lt;p&gt;Moreover, the term &amp;quot;relational variable&amp;quot; &lt;a href=&quot;https://en.wikipedia.org/wiki/Relvar&quot;&gt;was introduced&lt;/a&gt; in a work by Date and Darwen: &lt;a href=&quot;https://archive.org/embed/databasestypesre0003date&quot;&gt;Databases, Types, and The Relational Model: The Third Manifesto&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/02/book-sample.png&quot; alt=&quot;two pages of the book&quot;&gt;&lt;/p&gt;
&lt;p&gt;This work is available online thanks to the wonderful Internet Archive&#39;s online lending library, and in Chapter 2 &amp;quot;A Survey of the Relational Model&amp;quot; we see a definition of a sample relation (table) &lt;code&gt;S&lt;/code&gt; to hold supplier information:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;VAR S REAL RELATION
  { S# S#, SNAME NAME, STATUS INTEGER, CITY CHAR }
    KEY { S# };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This definition helps cement the concept of a relvar through the &lt;code&gt;VAR&lt;/code&gt; &amp;quot;assignment&amp;quot; or &amp;quot;association&amp;quot; of a relation definition (&lt;code&gt;{ ... }&lt;/code&gt;) to a name &lt;code&gt;S&lt;/code&gt;. So we can think of a relvar as a symbol that can reference different values at different times, where the values are actually what we&#39;d normally refer to as &amp;quot;tables&amp;quot; or &amp;quot;views&amp;quot;, formally called relations, and the data that they contain, and that we can query.&lt;/p&gt;
&lt;h3 id=&quot;exploring-in-sqlite&quot;&gt;Exploring in SQLite&lt;/h3&gt;
&lt;p&gt;Digging in a little more, Daniel, ever local-first, opens the SQLite prompt, which is quite like a REPL itself. He defines a table (relation), and then a view (also a relation), and then uses SQL to add data (a tuple) to the table:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sqlite&gt; create table foo ( a,b,c );
sqlite&gt; create view bar as select * from foo;
sqlite&gt; insert into foo values ( 1,2,3 );&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While a view is a projection, it is still in essence a table, a relation, in that it contains data.&lt;/p&gt;
&lt;p&gt;Next, Daniel summons the god of meta, with:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sqlite&gt; select * from sqlite_schema;
table|foo|foo|2|CREATE TABLE foo ( a,b,c )
view|bar|bar|0|CREATE VIEW bar as select * from foo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a little easier to comprehend if we look at the &lt;a href=&quot;https://www.sqlite.org/schematab.html&quot;&gt;SQLite schema table reference&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; sqlite_schema&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  name &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  tbl_name &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  rootpage &lt;span class=&quot;token keyword&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, we can use the SQLite REPL command &lt;code&gt;.headers on&lt;/code&gt;&lt;a href=&quot;https://example.com/website/blog/2025-02-14-tasc-notes--part-8/#footnotes&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; so that output like this is simpler to understand:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sqlite&gt; .headers on
sqlite&gt; select * from sqlite_schema;
type|name|tbl_name|rootpage|sql
table|foo|foo|2|CREATE TABLE foo ( a,b,c )
view|bar|bar|0|CREATE VIEW bar as select * from foo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having examined the definitions of the fields in &lt;code&gt;sqlite_schema&lt;/code&gt;, we can interpret these two records (or tuples, to use formal parlance) as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foo --&amp;gt; table(CREATE TABLE foo ( a,b,c )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bar --&amp;gt; view(CREATE VIEW bar as select * from foo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;where the &lt;code&gt;--&amp;gt;&lt;/code&gt; arrows indicate reference, associating the relvars with the relations.&lt;/p&gt;
&lt;h2 id=&quot;local-development-submodules-and-workspaces&quot;&gt;Local development, submodules and workspaces&lt;/h2&gt;
&lt;p&gt;While we&#39;ve &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/10/tasc-notes-part-4/#the-run-command&quot;&gt;talked briefly about monorepos&lt;/a&gt; previously in this series, it&#39;s worth revisiting for a second here too, where at around &lt;a href=&quot;https://www.youtube.com/live/FF1NzLwsmos?t=1770&quot;&gt;29:30&lt;/a&gt; Daniel outlines his local development setup which is based on an &amp;quot;umbrella&amp;quot; Node.js project using submodules and workspaces.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/02/local-development.png&quot; alt=&quot;local development&quot;&gt;&lt;/p&gt;
&lt;p&gt;The huge advantage to this approach is that you have everything at hand, locally. You can read more on the approaches used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.blog/open-source/git/working-with-submodules/&quot;&gt;Working with submodules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.npmjs.com/cli/v8/using-npm/workspaces&quot;&gt;NPM workspaces&lt;/a&gt; (also covered in the recent &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/30/cap-node.js-plugins/&quot;&gt;series on CAP Node.js Plugins&lt;/a&gt; - see &lt;a href=&quot;https://example.com/website/blog/posts/2024/10/05/cap-node.js-plugins-part-1-how-things-work/#creating-our-own-plugin-package&quot;&gt;Creating our own plugin package&lt;/a&gt; in the notes to part 1 of that series)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Daniel highlights a particular advantage of embracing workspaces: not having to connect to the cloud when building a constellation of interdependent microservices; rather, everything can be developed locally. &amp;quot;Like having your own private NPM registry&amp;quot;, too.&lt;/p&gt;
&lt;p&gt;And in explaining how he works with application projects in the context of his development &amp;quot;environment&amp;quot; (directory and file structure), I learned today how Node.js searches for modules: not just in the project&#39;s &lt;code&gt;node_modules/&lt;/code&gt; directory, but &amp;quot;upwards&amp;quot; through the directory hierarchy too. This is explained nicely in &lt;a href=&quot;https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders&quot;&gt;Loading from node_modules folders&lt;/a&gt;, and we can see how that works in Daniel&#39;s context here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/02/node-module-search-ascent.png&quot; alt=&quot;Daniel&#39;s directory and file structure&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Daniel pointed out here that &lt;code&gt;cdr/&lt;/code&gt; was the very first implementation of CAP from 2016, where he was working along on it; and it stands for &amp;quot;CDS Done Right&amp;quot; :-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, for the example application repository &amp;quot;nexus&amp;quot; cloned into the &lt;code&gt;verse/&lt;/code&gt; directory, Node.js will search for modules in a &lt;code&gt;node_modules/&lt;/code&gt; directory:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;in the &lt;code&gt;nexus/&lt;/code&gt; directory itself (not found)&lt;/li&gt;
&lt;li&gt;in the containing &lt;code&gt;verse/&lt;/code&gt; directory (also not found)&lt;/li&gt;
&lt;li&gt;in the directory that contains &lt;code&gt;verse/&lt;/code&gt; (which is &lt;code&gt;cap/&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, because of the symbolic link (identified in the screenshot as &lt;code&gt;node_modules@&lt;/code&gt;) that points to the &lt;code&gt;node_modules/&lt;/code&gt; directory inside of the &lt;code&gt;dev/&lt;/code&gt; directory, the CAP modules are found and loaded, from exactly where Daniel wants them loaded, from his local copy of whatever version of CAP he&#39;s working on or managing at that time.&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$HOME/
|
+- cap/
   |
   +- dev/
   |  |
   |  +-- node_modules/ --+
   |                      |
   +- node_modules@ ------+
   |
   +- verse/
      |
      +- nexus/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Node.js, &lt;a href=&quot;https://www.youtube.com/watch?v=c3MzYIo0Wxc&quot;&gt;unlike dogs ... according to Big Al&lt;/a&gt;, &lt;em&gt;can&lt;/em&gt; look up.&lt;/p&gt;
&lt;p&gt;To underline the utility and convenience of this structure and approach, Daniel starts the cds REPL with the &lt;code&gt;--run&lt;/code&gt; option (shortened to &lt;code&gt;-r&lt;/code&gt;) specifying ... the &lt;em&gt;package&lt;/em&gt; (module) name, not the directory name:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cap/cakes&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; cds r &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; @capire/bookshop
Welcome to cds repl &lt;span class=&quot;token function&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8.8&lt;/span&gt;.0
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - loaded model from &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;:

  &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;/dev/cap/samples/bookshop/srv/user-service.cds
  &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;/dev/cap/samples/bookshop/srv/cat-service.cds
  &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;/dev/cap/samples/bookshop/srv/admin-service.cds
  &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;/dev/cap/samples/bookshop/db/schema.cds
  &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;/dev/cds/common.cds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the locations of each of these five loaded files!&lt;/p&gt;
&lt;h2 id=&quot;queries-declare-relations&quot;&gt;Queries declare relations!&lt;/h2&gt;
&lt;p&gt;Daniel started the cds REPL at around &lt;a href=&quot;https://www.youtube.com/live/FF1NzLwsmos?t=2146&quot;&gt;36:45&lt;/a&gt; with the &amp;quot;bookshop&amp;quot; service to have something concrete with which to illustrate the close proximity of CAP (and CDS and CQL in particular) to the formal relational model.&lt;/p&gt;
&lt;p&gt;Consider this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT ID,name from Authors&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;Authors&lt;/code&gt; is the name of an entity, in CDS model terms. It also happens to be a table (at the &lt;a href=&quot;https://example.com/website/blog/2025-02-14-tasc-notes--part-8/#exploring-in-sqlite&quot;&gt;persistence layer level&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But critically, this is (almost) a &lt;em&gt;relvar&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What&#39;s returned ... is a set of &lt;em&gt;tuples&lt;/em&gt; (four, in this case):&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Emily Brontë&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Charlotte Brontë&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;each containing the attributes &lt;code&gt;ID&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now consider this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT ID,name,books.title from Authors&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spot the &lt;code&gt;books.title&lt;/code&gt; path expression?&lt;/p&gt;
&lt;p&gt;This is what&#39;s returned:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Emily Brontë&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; books_title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Charlotte Brontë&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; books_title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; books_title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; books_title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; books_title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is another set of tuples, where the path expression has been materialised into just another attribute &lt;code&gt;books_title&lt;/code&gt; (regardless of any SQL details going on under the surface to make this happen). This result set is ... a &lt;em&gt;relation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But it&#39;s not a relation pre-declared like &lt;code&gt;S&lt;/code&gt; (see &lt;a href=&quot;https://example.com/website/blog/2025-02-14-tasc-notes--part-8/#what-is-a-relvar&quot;&gt;What is a relvar?&lt;/a&gt; earlier); it&#39;s a relation declared ad hoc &lt;em&gt;with the query&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In SQL (and consequently CQL): queries describe (declare) relations.&lt;/p&gt;
&lt;p&gt;So, thinking back to the concept of relvars, is this query the relvar?&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;                          [
                            { ID: 101, name: &#39;Emily ...
                            { ID: 107, name: &#39;Charlo...
SELECT              ----&gt;   { ID: 150, name: &#39;Edgar ...
ID,name,books.title         { ID: 150, name: &#39;Edgar ...
from Authors                { ID: 170, name: &#39;Richar...
                          ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Almost, but not quite. But we can store that query in a variable&lt;a href=&quot;https://example.com/website/blog/2025-02-14-tasc-notes--part-8/#footnotes&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;myAuthors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT ID,name,books.title from Authors&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then that variable &lt;code&gt;myAuthors&lt;/code&gt; is the relvar:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;myAuthors                 [
  |                         { ID: 101, name: &#39;Emily ...
  V                         { ID: 107, name: &#39;Charlo...
SELECT              ----&gt;   { ID: 150, name: &#39;Edgar ...
ID,name,books.title         { ID: 150, name: &#39;Edgar ...
from Authors                { ID: 170, name: &#39;Richar...
                          ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if we &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/20/tasc-notes-part-6/#awaitable-queries-and-thenables&quot;&gt;use await&lt;/a&gt; to reify that relvar, we get the relation.&lt;/p&gt;
&lt;h2 id=&quot;relations-attributes-and-values&quot;&gt;Relations, attributes and values&lt;/h2&gt;
&lt;p&gt;When reifying a relation you&#39;re essentially expecting a set of tuples containing values. What happens when the attribute projection of an element expressed in a query doesn&#39;t have a value? What does that even mean? Well, Daniel illustrates this next by digging in a little deeper to the managed associations between &lt;code&gt;Books&lt;/code&gt; and &lt;code&gt;Authors&lt;/code&gt; here.&lt;/p&gt;
&lt;p&gt;But let&#39;s back up a second to re-familiarise ourselves with the &lt;code&gt;Books&lt;/code&gt; and &lt;code&gt;Authors&lt;/code&gt; entities in the &lt;a href=&quot;https://github.com/SAP-samples/cloud-cap-samples/tree/main/bookshop&quot;&gt;bookshop sample&lt;/a&gt;. Here&#39;s a very simplified pair of entities in a &lt;code&gt;simple-schema.cds&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books : {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
  title  : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  author : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to Authors&lt;/span&gt;;
}

&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Authors : {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
  name  : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  books : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to many Books&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; books.author = $self;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The to-one managed association in &lt;code&gt;Books&lt;/code&gt; causes a foreign key style element &lt;code&gt;author_ID&lt;/code&gt; to be generated automatically. The to-many association in &lt;code&gt;Authors&lt;/code&gt;, in contrast, does not.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you think of these associations in terms of &amp;quot;left&amp;quot; and &amp;quot;right&amp;quot;, to-one associations have the pointer value (the foreign key) on the left hand side, the &amp;quot;source&amp;quot; side, and to-many associations have the value on the right hand side, the &amp;quot;target&amp;quot; side.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can be seen clearly if we ask the compiler to show us the DDL, for example:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ cds compile &lt;span class=&quot;token parameter variable&quot;&gt;--to&lt;/span&gt; sql simple-schema.cds

CREATE TABLE Books &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  ID INTEGER NOT NULL,
  title NVARCHAR&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;,
  author_ID INTEGER,
  PRIMARY KEY&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

CREATE TABLE Authors &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  ID INTEGER NOT NULL,
  name NVARCHAR&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;,
  PRIMARY KEY&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are also likely to spot this in &lt;a href=&quot;https://cap.cloud.sap/docs/guides/databases#using-csv-files&quot;&gt;when creating CSV data&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ cds &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; data &lt;span class=&quot;token parameter variable&quot;&gt;--out&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-1&lt;/span&gt; data/*
Adding feature &lt;span class=&quot;token string&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
  Creating data/Authors.csv
  Creating data/Books.csv

Successfully added features to your project.
&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; data/Authors.csv &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
ID,name
&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; data/Books.csv &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
ID,title,author_ID&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see the &lt;code&gt;author_ID&lt;/code&gt; field in the header of the &lt;code&gt;Books.csv&lt;/code&gt; file. There is no equivalent in the &lt;code&gt;Authors.csv&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;With this in mind, let&#39;s turn back now to what Daniel shows us, which starts with an innocent-enough looking query:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT ID,name,books from Authors&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&#39;s returned, however, is not quite what we might be expecting:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Emily Brontë&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Charlotte Brontë&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Related but not the same as the request for &lt;code&gt;books.title&lt;/code&gt; made earlier, we&#39;re now asking for &lt;code&gt;books&lt;/code&gt;. What is that? It&#39;s the representation of the entire to-many managed association ... which does not (can not, really) have a (scalar) value.&lt;/p&gt;
&lt;p&gt;In contrast, regard this query on the &lt;code&gt;Books&lt;/code&gt; entity:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT ID,name,author from Books&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we&#39;re still requesting values for an association (&lt;code&gt;author&lt;/code&gt;) but this time it&#39;s a to-one association, which &lt;em&gt;does&lt;/em&gt; have a scalar value that can be surfaced. Yes, the value of the foreign key, i.e. the value of &lt;code&gt;author_ID&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author_ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author_ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author_ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author_ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author_ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the context of SQL being the real world representation of relations, in the end, we also can think about how foreign keys, the &amp;quot;coupling&amp;quot; in to-one association, become the values of the references that are surfaced in reifying such ad hoc relations. Before that, associations are &amp;quot;just pointer-shaped ideas&amp;quot;.&lt;/p&gt;
&lt;h3 id=&quot;postfix-projections-and-set-theory&quot;&gt;Postfix projections and set theory&lt;/h3&gt;
&lt;p&gt;Now we&#39;re more comfortable with the concept of &amp;quot;pointers&amp;quot; in the relational model and how it is respected in CAP, here&#39;s something that will blow your mind in a hopefully similar way to which it was in the previous part where the parallel between functional programming, aspects and entity extensions was revealed (see the &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/07/tasc-notes-part-7/#reflection-in-cds-modelling&quot;&gt;Reflections in CDS modelling&lt;/a&gt; section).&lt;/p&gt;
&lt;p&gt;First, consider the alternative way of expressing the prefix projection style query &lt;code&gt;SELECT ID,name,books from Authors&lt;/code&gt; - the so-called postfix projection style of expression:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT from Authors { ID, name, books }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At one level, we might think of this as mere syntactic sugar. But with the relational model theory in mind, we can adopt this style of expression as a better way of thinking about the model in general.&lt;/p&gt;
&lt;p&gt;Adding an arrow to represent the pointer in this relationship:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Authors -&gt; { ID, name, books }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;allows us to think about this, with respect to &lt;code&gt;Authors&lt;/code&gt;, as follows (in Daniel&#39;s words): &amp;quot;&lt;em&gt;from all your children (tuples), we want these attributes&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;So far so good. But we&#39;re now in a better position to project that thinking to the next level, thus:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Authors -&gt; { ID, name, books -&gt; { ID, title } }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While in relational model terms &lt;code&gt;Authors&lt;/code&gt; and &lt;code&gt;books&lt;/code&gt; are relvars, in terms of &lt;a href=&quot;https://en.wikipedia.org/wiki/Set_theory&quot;&gt;set theory&lt;/a&gt; they are sets, and the &amp;quot;books for the current Author&amp;quot; is part of that theory, as is how CAP extends SQL to CQL in that context to allow for such &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/07/tasc-notes-part-7/#wrapping-up-with-relational-algebra&quot;&gt;nested projections&lt;/a&gt; relations&lt;a href=&quot;https://example.com/website/blog/2025-02-14-tasc-notes--part-8/#footnotes&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; and expressions thereof.&lt;/p&gt;
&lt;p&gt;Behold:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ql &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT from Authors { ID, name, books { ID, title } }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which produces:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Emily Brontë&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Wuthering Heights&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Charlotte Brontë&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;207&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Jane Eyre&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Edgar Allen Poe&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;The Raven&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Eleonora&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Richard Carpenter&#39;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    books&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &#39;Catweazle&#39; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spot the nesting also in the result set - there are two books from Mr Poe, and (to use relational model terms) both are returned in the &lt;em&gt;set of tuples&lt;/em&gt; for the &lt;code&gt;books&lt;/code&gt; &lt;em&gt;attribute&lt;/em&gt; projected from the pointer &lt;em&gt;attribute&lt;/em&gt; in the corresponding &lt;code&gt;Author&lt;/code&gt; &lt;em&gt;tuple&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-universe-of-discourse-and-correlated-subqueries&quot;&gt;The universe of discourse and correlated subqueries&lt;/h3&gt;
&lt;p&gt;Rounding out this mind-expanding episode, Daniel notes that the concept of the &amp;quot;universe of discourse&amp;quot; (alternatively called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_of_discourse&quot;&gt;domain of discourse&lt;/a&gt;), the set of entities over which values may range, is an appropriate theoretical construct in which to think about how these values (from the nested projections) exist.&lt;/p&gt;
&lt;p&gt;And where the rubber meets the road, how are such expressions materialised? How does CAP go from the value of a relvar (which all along, here, has been the query expression) to the ad hoc relation which it represents?&lt;/p&gt;
&lt;p&gt;By means of &lt;a href=&quot;https://en.wikipedia.org/wiki/Correlated_subquery&quot;&gt;correlated subqueries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But what are they and where are they used?&lt;/p&gt;
&lt;p&gt;Well, asking the runtime to give us an insight into what it&#39;s doing, specifically with respect to SQL, we get a glimpse. Restarting the cds REPL at around &lt;a href=&quot;https://www.youtube.com/live/FF1NzLwsmos?t=3002&quot;&gt;50:02&lt;/a&gt; with the &lt;code&gt;DEBUG&lt;/code&gt; environment variable set appropriately, Daniel demonstrates:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cap/cakes&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;sql cds r &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; @capire/bookshop
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; await cds.ql &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;SELECT from Authors &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID, name, books &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID, title &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - BEGIN
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - SELECT json_insert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;{}&#39;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;ID&quot;&#39;&lt;/span&gt;,ID,&lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;name&quot;&#39;&lt;/span&gt;,name,&lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;books&quot;&#39;&lt;/span&gt;,books-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;$&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; as _json_ FROM
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SELECT Authors.ID,Authors.name,&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SELECT jsonb_group_array&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsonb_insert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;{}&#39;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;ID&quot;&#39;&lt;/span&gt;,ID,&lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;title&quot;&#39;&lt;/span&gt;,
title&lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt; as _json_ FROM &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SELECT books.ID,books.title FROM sap_capire_bookshop_Books as books WHERE
Authors.ID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; books.author_ID&lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt; as books FROM sap_capire_bookshop_Authors as Authors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - COMMIT
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID: &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;,
    name: &lt;span class=&quot;token string&quot;&gt;&#39;Emily Brontë&#39;&lt;/span&gt;,
    books: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;201&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Wuthering Heights&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID: &lt;span class=&quot;token number&quot;&gt;107&lt;/span&gt;,
    name: &lt;span class=&quot;token string&quot;&gt;&#39;Charlotte Brontë&#39;&lt;/span&gt;,
    books: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;207&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Jane Eyre&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID: &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;,
    name: &lt;span class=&quot;token string&quot;&gt;&#39;Edgar Allen Poe&#39;&lt;/span&gt;,
    books: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;251&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;The Raven&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;252&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Eleonora&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ID: &lt;span class=&quot;token number&quot;&gt;170&lt;/span&gt;,
    name: &lt;span class=&quot;token string&quot;&gt;&#39;Richard Carpenter&#39;&lt;/span&gt;,
    books: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ID: &lt;span class=&quot;token number&quot;&gt;271&lt;/span&gt;, title: &lt;span class=&quot;token string&quot;&gt;&#39;Catweazle&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what I call the &amp;quot;swan effect&amp;quot;: what we see is graceful elegance, what we don&#39;t see is the furious paddling under the surface.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/02/swan.jpg&quot; alt=&quot;picture of a swan&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A mute swan, picture courtesy of &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:CygneVaires.jpg&quot;&gt;Wikimedia Commons&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The graceful elegance of &lt;code&gt;SELECT from Authors { ID, name, books { ID, name } }&lt;/code&gt; is only possible because of the furious paddling going on under the covers - here&#39;s that SQL statement from the DEBUG output in a more readable format:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
  json_insert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&#39;{}&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;ID&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ID&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;name&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;books&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; books &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$&#39;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; _json_
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
      Authors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      Authors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
          jsonb_group_array&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            jsonb_insert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;token string&quot;&gt;&#39;{}&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;ID&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ID&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$.&quot;title&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; _json_
        &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
              books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title
            &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
              sap_capire_bookshop_Books &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; books
            &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt;
              Authors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author_ID
          &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; books
    &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
      sap_capire_bookshop_Authors &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Authors
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Briefly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieval of &lt;code&gt;books&lt;/code&gt; is achieved via a SQL subselect (&lt;code&gt;SELECT Authors.ID, Authors.name ( the-subselect ) as books FROM sap_capire_bookshop_Authors as Authors&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;SQL subselects are normally allowed only when the result is scalar&lt;/li&gt;
&lt;li&gt;But CAP maps nested projections into SQL subselects that return a set, i.e. that are not scalar&lt;/li&gt;
&lt;li&gt;The set that is to be returned is &amp;quot;turned into&amp;quot; a scalar (thus legitimising this SQL subselect) with the &lt;code&gt;jsonb_group_array&lt;/code&gt; function&lt;a href=&quot;https://example.com/website/blog/2025-02-14-tasc-notes--part-8/#footnotes&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; which creates a stringified JSON structure&lt;/li&gt;
&lt;li&gt;Further up the call stack, above the execution of this query, this stringified JSON is turned back into the set that is, in reality, the shape, or form, in which we expect the &amp;quot;real&amp;quot; value to exist&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &amp;quot;correlated&amp;quot; part of this SQL subselect (subquery) is how the inner relation (&lt;code&gt;WHERE Authors.ID = books.author_ID&lt;/code&gt;) refers to a value in the outer query (&lt;code&gt;SELECT Authors.ID&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-closure-easter-egg&quot;&gt;A closure Easter Egg&lt;/h2&gt;
&lt;p&gt;This is where this episode ends, having imparted a metric tonne of wonder and understanding both from the art and the science side of CAP. But did you notice? Daniel wasn&#39;t even done at this point - he left us with a small Easter Egg here, in showing us the nature of correlated subqueries.&lt;/p&gt;
&lt;p&gt;What is that Easter Egg? Well, we&#39;ve previously learned how some functional programming concepts such as pure functions play a key role in the layers that inform CAP&#39;s design and implementation. Well, here&#39;s another: did you notice how correlated subqueries are exactly like &lt;a href=&quot;https://en.wikipedia.org/wiki/Closure_(computer_programming)&quot;&gt;closures&lt;/a&gt; (a technique for implementing lexically scoped name binding in languages with support for first class functions)? Let me know in the comments what you think.&lt;/p&gt;
&lt;p&gt;As always, thanks for watching, and especially thanks for reading this far. See you in the next episode!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;footnotes&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Notice how these REPL commands have a similar structure (they begin with a &lt;code&gt;.&lt;/code&gt;) to the Node.js / cds REPL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remember, queries are first class citizens - see &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/16/functions-as-first-class-citizens-in-sicp-lecture-1a/&quot;&gt;Functions as first class citizens in SICP Lecture 1A&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more on nested projections, you might enjoy &lt;a href=&quot;https://example.com/website/blog/posts/2024/07/12/turning-an-odata-expand-into-a-cds.ql-cql-query-with-a-projection-function-in-cap/&quot;&gt;Turning an OData expand into a cds.ql CQL query with a projection function in CAP&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jsonb_group_array&lt;/code&gt; is an &lt;a href=&quot;https://www.sqlite.org/json1.html#jgrouparrayb&quot;&gt;array aggregate function&lt;/a&gt; (the &lt;code&gt;b&lt;/code&gt; in the name represents the &amp;quot;binary&amp;quot; version which is more efficient).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>TASC Notes - Part 7</title>
    <link href="https://example.com/website/blog/2025-02-07-tasc-notes--part-7/" />
    <updated>2025-02-07T00:00:00Z</updated>
    <id>https://example.com/website/blog/2025-02-07-tasc-notes--part-7/</id>
    <content type="html">&lt;p&gt;For all resources related to this series, see the post &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/06/the-art-and-science-of-cap/&quot;&gt;The Art and Science of CAP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=r_mxsBZSgEo&quot;&gt;This episode&lt;/a&gt; started with a review of the previous episode (part 6), based on the &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/20/tasc-notes-part-6/&quot;&gt;notes for that episode&lt;/a&gt;. We continued to look back more generally over the previous episodes to pick out the main themes around which we wove a (hopefully) coherent story:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Domain-driven design&lt;/li&gt;
&lt;li&gt;The importance of modelling&lt;/li&gt;
&lt;li&gt;Aspect-oriented programming&lt;/li&gt;
&lt;li&gt;Artistic &amp;amp; scientific principles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During this review, at around &lt;a href=&quot;https://www.youtube.com/watch?v=r_mxsBZSgEo&amp;amp;t=1105&quot;&gt;18:25&lt;/a&gt;, it was almost inevitable that we revisited the Class vs Prototype conversation, dwelling on the differences, and the importance of prototypical inheritance (the power of which is also reflected in the concept of &lt;a href=&quot;https://example.com/website/blog/posts/2024/11/08/flattening-the-hierarchy-with-mixins/&quot;&gt;mixins&lt;/a&gt;). But before we got to diving into that, we took a quick detour to revisit the theme of code generation.&lt;/p&gt;
&lt;h2 id=&quot;a-quick-review-of-some-bad-practices-and-what-cap-brings&quot;&gt;A quick review of some bad practices and what CAP brings&lt;/h2&gt;
&lt;p&gt;We talked about code generation, and how and why it appears in the &lt;a href=&quot;https://cap.cloud.sap/docs/about/bad-practices&quot;&gt;Bad Practices&lt;/a&gt; topic in Capire. This time Daniel reminded us of today&#39;s popular context of serverless and functions-as-a-service where codebase size and startup times - two areas where code generation cause more problems than they solve - are critical. Moreover, an approach that CAP also takes here is what one could only describe as at the opposite end of code generation and the &lt;a href=&quot;https://cap.cloud.sap/docs/about/bad-practices#tons-of-glue-code&quot;&gt;staleness&lt;/a&gt; that inevitably accompanies that - dynamic interpretation of the models at run time.&lt;/p&gt;
&lt;p&gt;Talking of staleness and &amp;quot;glue code&amp;quot; (technical non-domain code), another key philosophy driving CAP&#39;s design and realisation here is the idea that application developers should concentrate on developing the application. They should not be working on technical aspects of bringing that application to bear - tenant isolation, database management, security, protocol-level service integration and so on.&lt;/p&gt;
&lt;p&gt;In fact, the entire idea of CAP&#39;s &lt;a href=&quot;https://cap.cloud.sap/docs/about/best-practices#the-calesi-pattern&quot;&gt;Calesi Pattern&lt;/a&gt; (CAP-level service integration) fits squarely into the space that this philosophical approach is carving out for us - the provision of CAP client libraries for BTP platform services that are designed to drastically reduce boilerplate and purely technical code.&lt;/p&gt;
&lt;p&gt;Another aspect of why &lt;a href=&quot;https://example.com/website/blog/posts/2024/11/07/five-reasons-to-use-cap/#1-the-code-is-in-the-framework-not-outside-of-it&quot;&gt;keeping the code inside the framework&lt;/a&gt; is important is eloquently expressed by Daniel: as builders of enterprise applications, we have to ensure that our code scales, and that our teams and the output from those teams can scale too.&lt;/p&gt;
&lt;p&gt;Taking care of the important non-domain-specific aspects of building such enterprise applications not only removes the tedium but also reduces the chance for error and minimises the possibilities for varying and ultimately chaotically different approaches across different teams (think about how SAP-delivered UI5 based Fiori apps have standard layouts and MVC patterns, and why Fiori elements came into being).&lt;/p&gt;
&lt;h2 id=&quot;revisiting-some-of-caps-solid-science-foundations&quot;&gt;Revisiting some of CAP&#39;s solid science foundations&lt;/h2&gt;
&lt;p&gt;At around &lt;a href=&quot;https://www.youtube.com/watch?v=r_mxsBZSgEo&amp;amp;t=1520&quot;&gt;25:20&lt;/a&gt; Daniel shared a biography slide from a deck that he&#39;d compiled for a recent presentation on CAP at the &lt;a href=&quot;https://hpi.de/en/&quot;&gt;Hasso Plattner Institute&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I couldn&#39;t help notice Daniel&#39;s pedigree from that biography slide; I mean, many of us already know Smalltalk runs through his veins, and perhaps knew, or at least suspected, that he has had enough experience&lt;a href=&quot;https://example.com/website/blog/2025-02-07-tasc-notes--part-7/#footnotes&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; with Java and JEE to ensure that CAP exudes good practices and eschews bad ones ... in the right way ;-)&lt;/p&gt;
&lt;p&gt;And I was delighted to learn that he also has been touched by NeXTSTEP - an object-oriented OS that also happened to sport a graphical desktop manager that is one of my favourites (and which lives on in the form of &lt;a href=&quot;https://www.windowmaker.org/&quot;&gt;Window Maker&lt;/a&gt;). I&#39;m already assuming that you realise that NeXTSTEP was created for the machines upon which the Web was invented - it was on a NeXTcube that Tim Berners-Lee wrote the first versions of Web client and server software.
&lt;img src=&quot;https://example.com/website/images/2025/02/NeXTcube.jpg&quot; alt=&quot;A NeXTcube&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:NEXT_Cube-IMG_7154.jpg&quot;&gt;Photo courtesy of Wikimedia Commons&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Daniel jumps from Smalltalk to Lisp (the latter influenced the former) which is the &amp;quot;hero language&amp;quot; of functional programming, one of the key science pillars of CAP. It&#39;s hard to sum up decades of computing and computer science here, but I can sleep easy knowing that the good parts are in CAP; and those parts that were ultimately discovered to be not so good ... are not.&lt;/p&gt;
&lt;p&gt;In the abstract-all-the-things mania of the 90&#39;s we had CASE and UML (and the corresponding code generation machinery that went with that) and by and large this has now been shown, over and over again, to be a noble but essentially wrong direction.&lt;/p&gt;
&lt;p&gt;Ironically, or at least in stark contrast, we have functional programming and the simplicity of treating data as data (passive), which in turn allows us to think about immutability. And things that cannot move ... cannot break.&lt;/p&gt;
&lt;p&gt;Not only that, but such qualities allow us to think about processing large quantities of data with simple pipelines, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/MapReduce&quot;&gt;MapReduce&lt;/a&gt;, which is a scalable and relatively efficient way of analysing data in a chain of steps that are each horizontally scalable (and yes, the name comes from two classic functions &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;&lt;a href=&quot;https://example.com/website/blog/2025-02-07-tasc-notes--part-7/#footnotes&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; that are building blocks in many functional programming approaches).&lt;/p&gt;
&lt;p&gt;Core functional programming tenets such as immutability and the related concept of pure functions, i.e. those that are side-effect free, principles that allows mechanisms such as function chains (such as ones used in MapReduce) are consequently found in CAP too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cap.cloud.sap/docs/about/best-practices#services&quot;&gt;Services&lt;/a&gt; are stateless&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cap.cloud.sap/docs/about/best-practices#data&quot;&gt;Data&lt;/a&gt; is passive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the topic of passive data, Daniel relates the story of an esteemed colleague extolling the virtues of &lt;em&gt;non-anemic&lt;/em&gt; objects, while Daniel himself takes the opposite approach. While the adjective &lt;a href=&quot;https://deviq.com/domain-driven-design/anemic-model&quot;&gt;anemic&lt;/a&gt; is an established one, it is a pejorative description based on a viewpoint held not least by luminaries such as Martin Fowler &lt;a href=&quot;https://example.com/website/blog/2025-02-07-tasc-notes--part-7/#footnotes&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;, and I suggest we use a different, more positive term for what we&#39;re striving for here. &amp;quot;Pure objects&amp;quot;, anyone?&lt;/p&gt;
&lt;p&gt;Anemic, or pure objects, are almost a prerequisite for late binding and aspect oriented techniques.&lt;/p&gt;
&lt;h2 id=&quot;prototype-based-system-examples&quot;&gt;Prototype based system examples&lt;/h2&gt;
&lt;p&gt;Riffing on that last point, championing the prototype based inheritance model over the class based one, Daniel opens up one of our (now) favourite developer tools - the cds REPL - to give an example, which I&#39;ll try to summarise here.&lt;/p&gt;
&lt;p&gt;First, a &amp;quot;class&amp;quot; &lt;code&gt;Foo&lt;/code&gt; is defined, and an &amp;quot;instance&amp;quot; created:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; Foo = class { bar = 11; boo(){ return &quot;Hu?&quot; } }
class { bar = 11; boo(){ return &quot;Hu?&quot; } }
&gt; foo = new Foo
Foo { bar: 11 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;boo&lt;/code&gt; &amp;quot;method&amp;quot; is available on &lt;code&gt;foo&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; foo.boo()
Hu?&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that so far I&#39;ve used double quotes around &amp;quot;class&amp;quot;, &amp;quot;instance&amp;quot; and &amp;quot;method&amp;quot; here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next we can create &lt;code&gt;Bar&lt;/code&gt; as an child &amp;quot;class&amp;quot; of &lt;code&gt;Foo&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; Bar = class extends Foo {}
class extends Foo {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point &amp;quot;instances&amp;quot; of &lt;code&gt;Bar&lt;/code&gt; have both the &lt;code&gt;bar&lt;/code&gt; property and the &lt;code&gt;boo&lt;/code&gt; &amp;quot;method&amp;quot; available:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; bar = new Bar
Bar { bar: 11 }
&gt; bar.boo()
Hu?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&#39;s what&#39;s really going to wake you up: THERE IS NO CLASS. Moreover, &lt;code&gt;bar&lt;/code&gt; is not an instance either (in the sense that we might understand or expect from the Java world, for example).&lt;/p&gt;
&lt;p&gt;It&#39;s &lt;em&gt;prototypes&lt;/em&gt; all the way down.&lt;/p&gt;
&lt;p&gt;What&#39;s great is that we can employ aspect oriented approaches here, in that even if we&#39;re not the owner of &lt;code&gt;Foo&lt;/code&gt;, we can &lt;em&gt;add an aspect&lt;/em&gt;, a new behaviour to it, in a totally &amp;quot;late&amp;quot; way:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; Foo.prototype.moo = function(){ return &quot;Not a cow&quot; }
function(){ return &quot;Not a cow&quot; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And through the syntactic sugar and class machinery here, we see that &lt;code&gt;bar&lt;/code&gt; even now has access to this new behaviour:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; bar.moo()
Not a cow&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, to underline how fundamental the prototype mechanic is here, Daniel creates another &amp;quot;instance&amp;quot; of &lt;code&gt;Foo&lt;/code&gt; (&lt;code&gt;car&lt;/code&gt;), but perhaps not how you&#39;d expect:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; car = { __proto__: foo }
Foo {}
&gt; car.bar
11
&gt; car.boo()
Hu?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Boom!&lt;/p&gt;
&lt;h2 id=&quot;reflection-in-the-cds-repl&quot;&gt;Reflection in the cds REPL&lt;/h2&gt;
&lt;p&gt;Directly after this, at around &lt;a href=&quot;https://www.youtube.com/watch?v=r_mxsBZSgEo&amp;amp;t=2336&quot;&gt;38:56&lt;/a&gt;, Daniel jumps into the cds REPL to demonstrate how much of this is also reflected in CDS model construction. He almost immediately reaches for the relatively new &lt;code&gt;.inspect&lt;/code&gt; cds REPL command (which we saw both in a &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/10/tasc-notes-part-4/#the-repl&quot;&gt;previous episode of this series&lt;/a&gt; and also in &lt;a href=&quot;https://example.com/website/blog/posts/2025/01/10/cap-node.js-plugins-part-2-using-the-repl/#exploring-the-cds-facade&quot;&gt;part 2 of the mini-series on CAP Node.js plugins&lt;/a&gt;), which in turn reveals a whole series of &lt;code&gt;LinkedDefinitions&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These &lt;code&gt;LinkedDefinitions&lt;/code&gt; are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol&quot;&gt;iterables&lt;/a&gt;, and if you want to know more about how to embrace them, for example using destructuring assignments or the &lt;code&gt;for ... of&lt;/code&gt; and &lt;code&gt;for ... in&lt;/code&gt; statements see the &lt;a href=&quot;https://example.com/website/blog/posts/2025/01/10/cap-node.js-plugins-part-2-using-the-repl/#digging-deeper-into-the-bookshop-service&quot;&gt;Digging deeper into the Bookshop service&lt;/a&gt; section of the notes to part 2 of this series.&lt;/p&gt;
&lt;h2 id=&quot;reflection-in-cds-modelling&quot;&gt;Reflection in CDS modelling&lt;/h2&gt;
&lt;p&gt;Launching from the fundamental prototype approach which we&#39;ve explored now, Daniel connects the dots for us by revisiting some common&lt;a href=&quot;https://example.com/website/blog/2025-02-07-tasc-notes--part-7/#footnotes&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; aspects (&lt;code&gt;managed&lt;/code&gt; and &lt;code&gt;cuid&lt;/code&gt;) to show how the prototype approach brings the ultimate in aspect-based flexibility.&lt;/p&gt;
&lt;p&gt;In particular, he relates a project situation where the &lt;code&gt;managed&lt;/code&gt; aspect wasn&#39;t quite enough for what was required - the domain model design required the ability to store a comment on what was changed, in addition to actually tracking that it was changed.&lt;/p&gt;
&lt;p&gt;And guess what? In &lt;em&gt;exactly the same way&lt;/em&gt; as &lt;code&gt;moo&lt;/code&gt; was added to &lt;code&gt;Foo&lt;/code&gt; as a late injected aspect earlier, despite the lack of actual &amp;quot;ownership&amp;quot; of &lt;code&gt;Foo&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;moo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Not a cow&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... the project was able to realise that design by adding the new element (let&#39;s use &lt;code&gt;boo&lt;/code&gt; to keep things simple and show the parallel) to the &lt;code&gt;managed&lt;/code&gt; aspect, again, despite the lack of actual &amp;quot;ownership&amp;quot; of that aspect or its wider context (&lt;code&gt;@sap/cds/common&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;extend&lt;/span&gt; managed with {
  boo : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is art and science coming full circle in a beautiful parallel, and was well worth revisiting since Daniel talked about it earlier in the series, and which I subsequently blogged about in &lt;a href=&quot;https://example.com/website/blog/posts/2024/11/08/flattening-the-hierarchy-with-mixins/&quot;&gt;Flattening the hierarachy with mixins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This time around though, we are better informed to grok how CDS modelling reflects the fundamental building blocks of the computer science upon which it is built, and the obvious relationship bursts forth from the editor.&lt;/p&gt;
&lt;h2 id=&quot;extensible-means-extensible&quot;&gt;Extensible means extensible&lt;/h2&gt;
&lt;p&gt;Following this completed circle, Daniel then expands on the extension by showing that effectively anything is possible, by specifying that the element in the extension should actually be a relationship to a complex object. On the way, we are taught how to think in flexible rather than rigid terms, using CDL features that we actually already know.&lt;/p&gt;
&lt;p&gt;The starting scenario is that the &amp;quot;bookshop&amp;quot; service has a couple of entities &lt;code&gt;Books&lt;/code&gt; and &lt;code&gt;Authors&lt;/code&gt;, each of which are extended via the &lt;code&gt;managed&lt;/code&gt; aspect:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books : managed {
  descr  : localized &lt;span class=&quot;token type builtin&quot;&gt;String(1111)&lt;/span&gt;;
  author : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to Authors&lt;/span&gt; &lt;span class=&quot;token annotation important&quot;&gt;@mandatory;&lt;/span&gt;
  ...
}

&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Authors : managed {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
  name   : &lt;span class=&quot;token type builtin&quot;&gt;String(111)&lt;/span&gt; &lt;span class=&quot;token annotation important&quot;&gt;@mandatory;&lt;/span&gt;
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this addition of an element via the extension to the &lt;code&gt;managed&lt;/code&gt; aspect:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;extend&lt;/span&gt; managed with {
  boo : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;each of &lt;code&gt;Books&lt;/code&gt; and &lt;code&gt;Authors&lt;/code&gt; would have this &lt;code&gt;boo&lt;/code&gt; element too.&lt;/p&gt;
&lt;h3 id=&quot;the-wrong-way&quot;&gt;The wrong way&lt;/h3&gt;
&lt;p&gt;But what happens when that element should be something more complex, like a change list:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; ChangeList : {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID    : &lt;span class=&quot;token type builtin&quot;&gt;UUID&lt;/span&gt;;
  timestamp : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp&lt;/span&gt;;
  user      : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  comment   : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks reasonable, so let&#39;s modify the additional element to relate to this. Something like:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;extend&lt;/span&gt; managed with {
  changes : &lt;span class=&quot;token association-composition keyword&quot;&gt;Composition of many ChangeList&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; changes.book = $self;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with this is it&#39;s both brittle and inflexible as we now also need to add an element in the &lt;code&gt;ChangeList&lt;/code&gt; entity to be a back pointer:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; ChangeList : {
  Book      : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to Books&lt;/span&gt;;
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID    : &lt;span class=&quot;token type builtin&quot;&gt;UUID&lt;/span&gt;;
  timestamp : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp&lt;/span&gt;;
  user      : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  comment   : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oops - and also one for &lt;code&gt;Authors&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; ChangeList : {
  Book      : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to Books&lt;/span&gt;;
  Authors   : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to Authors&lt;/span&gt;;
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID    : &lt;span class=&quot;token type builtin&quot;&gt;UUID&lt;/span&gt;;
  timestamp : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp&lt;/span&gt;;
  user      : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  comment   : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where will this end? Well, not only is it brittle and inflexible ... it&#39;s also wrong, because this aspect extension is now inextricably tied up with references to random entities to which the aspect itself has been applied.&lt;/p&gt;
&lt;p&gt;And how could that ever work, when you factor &lt;a href=&quot;https://www.youtube.com/watch?v=ScEPu1cs4l0&quot;&gt;time&lt;/a&gt; into the equation? Who knows what future entities you might have and want to extend with the &lt;code&gt;managed&lt;/code&gt; aspect? And let&#39;s not even think about trying to address this with &lt;a href=&quot;https://en.wikipedia.org/wiki/Polymorphic_association&quot;&gt;polymorphic associations&lt;/a&gt;. And not even coming up with a generic &lt;code&gt;parent : &amp;lt;sometype&amp;gt;&lt;/code&gt; is going to work either.&lt;/p&gt;
&lt;p&gt;As my sister Katie is fond of saying: &lt;em&gt;How about &amp;quot;no&amp;quot;?&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If we were to doggedly persist with such an approach, we would still have the ugliness of what I feel are the CDS model relationship equivalents of impure functions, that have &amp;quot;side effects&amp;quot;, relationships pointing to somewhere outside their scope. I am minded to think about the myriad patch cables that connect different modules on a modular synth, much like the one shown in this classic photo by &lt;a href=&quot;https://www.flickr.com/photos/jamesthephotographer/120916737/&quot;&gt;Jim Gardner&lt;/a&gt;, courtesy of Jim and &lt;a href=&quot;https://commons.wikimedia.org/w/index.php?curid=1737148&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/02/modular-synth.jpg&quot; alt=&quot;Steve Porcaro of Toto with a modular synthesizer in 1982&quot;&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Yes, that&#39;s Steve Porcaro of Toto, keyboard playing brother of Jeff Porcaro, creator of possibly the coolest drum pattern ever, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rosanna_shuffle&quot;&gt;Rosanna shuffle&lt;/a&gt;)&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-right-way&quot;&gt;The right way&lt;/h3&gt;
&lt;p&gt;Staying in the early 80&#39;s for a second (Rosanna was from Toto&#39;s 1982 album &amp;quot;Toto IV&amp;quot;), we can be mindful of the exhortation taken from the title of Talking Heads&#39; classic studio album from 1980, and &amp;quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Remain_in_Light&quot;&gt;Remain in Light&lt;/a&gt;&amp;quot;, i.e. adhere to the concept of aspects, rather than tie ourselves up with what is nearer to classes (objects) and relationships.&lt;/p&gt;
&lt;p&gt;Reframing the complex object requirement in aspect terms:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;aspect&lt;/span&gt; ChangeList : {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID    : &lt;span class=&quot;token type builtin&quot;&gt;UUID&lt;/span&gt;;
  timestamp : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp&lt;/span&gt;;
  user      : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  comment   : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;means that we just need a simpler managed relationship:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;extend&lt;/span&gt; managed with {
  changes : &lt;span class=&quot;token association-composition keyword&quot;&gt;Composition of many ChangeList&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and, in Daniel&#39;s words (at around &lt;a href=&quot;https://www.youtube.com/watch?v=r_mxsBZSgEo&amp;amp;t=2973&quot;&gt;49:33&lt;/a&gt;) - &amp;quot;we&#39;re done&amp;quot;.&lt;/p&gt;
&lt;p&gt;Behind the scenes there&#39;s still an entity, in the shape of the aspect defined here, but that entity is added by the compiler, as Daniel shows when he pulls back the curtain (via the &lt;a href=&quot;https://cap.cloud.sap/docs/tools/cds-editors#preview-cds-sources&quot;&gt;Preview CDS sources&lt;/a&gt; feature in the VS Code extension) to reveal an entity (a &amp;quot;definition&amp;quot;) named:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sap.capire.bookshop.Books.changes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which has a name made up from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the namespace &lt;code&gt;sap.capire.bookshop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the entity name &lt;code&gt;Books&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the element &lt;code&gt;changes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The eagle-eyed amongst you will also have of course spotted the &lt;code&gt;Authors&lt;/code&gt; equivalent in that definition list too, as &lt;code&gt;Authors&lt;/code&gt; was also adorned with the &lt;code&gt;managed&lt;/code&gt; aspect:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/images/2025/02/definitions.png&quot; alt=&quot;definitions&quot;&gt;&lt;/p&gt;
&lt;p&gt;In generating this entity, the compiler also includes an element to point back, and because this work is at compile time, and individually specific to each primary entity (&lt;code&gt;Books&lt;/code&gt; and &lt;code&gt;Authors&lt;/code&gt; here) it can be specific and precise. This is what the YAML representation of the CSN based on the model looks like, for the &lt;code&gt;changes&lt;/code&gt; element relating to the &lt;code&gt;Books&lt;/code&gt; entity:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;sap.capire.bookshop.Books.changes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; entity
  &lt;span class=&quot;token key atrule&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;up_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.Association
      &lt;span class=&quot;token key atrule&quot;&gt;cardinality&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; sap.capire.bookshop.Books
      &lt;span class=&quot;token key atrule&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.UUID&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.Timestamp&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.String&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.String&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a lovely example of the truth, the reality, underpinning the general idea that with aspect oriented programming: &amp;quot;you can extend everything that you can get access to, whether it is your definition or somebody else&#39;s definition or even your framework&#39;s definition&amp;quot;. And that extension will be applied to the appropriate usages of that definition.&lt;/p&gt;
&lt;p&gt;Daniel goes further to emphasise that while this (deliberately simple) example was in the same &lt;code&gt;schema.cds&lt;/code&gt; file, the definitions and extensions can be stored in separate files, used in CDS plugins, and so on. In fact, this is exactly how the &lt;a href=&quot;https://github.com/cap-js/change-tracking&quot;&gt;Change Tracking Plugin&lt;/a&gt; works.&lt;/p&gt;
&lt;p&gt;Note that this was a named aspect (the name is &lt;code&gt;ChangeList&lt;/code&gt;) but the same modelling outcome could have been effected using an anonymous aspect, like this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;extend&lt;/span&gt; managed with {
    changes : &lt;span class=&quot;token association-composition keyword&quot;&gt;Composition of many &lt;/span&gt;{
    &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID    : &lt;span class=&quot;token type builtin&quot;&gt;UUID&lt;/span&gt;;
    timestamp : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp&lt;/span&gt;;
    user      : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
    comment   : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up-with-relational-algebra&quot;&gt;Wrapping up with relational algebra&lt;/h2&gt;
&lt;p&gt;CAP&#39;s query language, &lt;a href=&quot;https://cap.cloud.sap/docs/cds/cql&quot;&gt;CQL&lt;/a&gt;, is based upon and extends SQL in two important directions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nested projections&lt;/li&gt;
&lt;li&gt;path expressions (along associations)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From a science perspective, Daniel and the team were keen to validate the idea and realisation of CDS models, and CQL in particular. To this end, behold:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop.Books } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;./schema&#39;;
&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop.Authors } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;./schema&#39;;

&lt;span class=&quot;token annotation important&quot;&gt;@singleton&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Schema {
  &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID   : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;; &lt;span class=&quot;token single-line-comment comment&quot;&gt;// just to make it a valid DDL&lt;/span&gt;
  Books    : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to many Books&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; 1=1;
  Authors  : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to many Authors&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; 1=1;
}&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;In case you&#39;re scratching your head over &lt;code&gt;@singleton&lt;/code&gt;, Daniel has some advice: &amp;quot;Don&#39;t try to look it up, I just invented it&amp;quot; :-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Consider these queries:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; await cds.ql `SELECT from Schema:Books`
[]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; await INSERT({ID:1}).into(Schema)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; await cds.ql `SELECT from Schema:Books`
[ (some results) ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your task (homework), should you choose to accept it, is to think about this, read up on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_model&quot;&gt;Relational Model&lt;/a&gt;, and maybe even try the queries out yourself.&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 27 Feb 2025&lt;/strong&gt;: See the final section of the notes to part 9: &lt;a href=&quot;https://example.com/website/blog/posts/2025/02/21/tasc-notes-part-9/#back-to-the-roots&quot;&gt;Back to the root(s)&lt;/a&gt; for more on this and a dig in to making this real.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;footnotes&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Battle scars.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more on &lt;code&gt;reduce&lt;/code&gt; and how it is such a fundamental building block, see &lt;a href=&quot;https://example.com/website/blog/posts/2024/07/23/reduce-the-ur-function/&quot;&gt;reduce - the ur-function&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Martin&#39;s post &lt;a href=&quot;https://martinfowler.com/bliki/AnemicDomainModel.html&quot;&gt;Anemic Domain Model&lt;/a&gt; is from 2003 and rather cutting but definitely worth a read, as is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Anemic_domain_model&quot;&gt;Wikipedia article on the same topic&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Literally (as many of us use them in our own projects) and technically (as they&#39;re supplied in &lt;code&gt;@sap/cds/common&lt;/code&gt;) - see &lt;a href=&quot;https://cap.cloud.sap/docs/cds/common&quot;&gt;Common Types and Aspects&lt;/a&gt; in Capire.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>CAP Node.js plugins - part 3 - writing our own</title>
    <link href="https://example.com/website/blog/2025-01-17-cap-nodejs-plugins--part-3--writing-our-own/" />
    <updated>2025-01-17T00:00:00Z</updated>
    <id>https://example.com/website/blog/2025-01-17-cap-nodejs-plugins--part-3--writing-our-own/</id>
    <content type="html">&lt;p&gt;For information on the series and links to all resources, see the &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/30/cap-node.js-plugins/&quot;&gt;CAP Node.js Plugins&lt;/a&gt; series post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The examples in this post are based on CAP Node.js at release 8.6 (&lt;a href=&quot;https://cap.cloud.sap/docs/releases/dec24&quot;&gt;December 2024&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;continuing-from-where-we-left-off-last-time&quot;&gt;Continuing from where we left off last time&lt;/h2&gt;
&lt;p&gt;We finished part 2 &lt;a href=&quot;https://example.com/website/blog/posts/2025/01/10/cap-node.js-plugins-part-2-using-the-repl/#identifying-the-elements-annotated-with-loud&quot;&gt;with a function&lt;/a&gt; that we named &lt;code&gt;loudElements&lt;/code&gt; which gave us a summary of entities in our service, and which elements (if any) were annotated with &lt;code&gt;@loud&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In fact, using the word &amp;quot;service&amp;quot; here in the singular prompts me to want to make things a tiny bit more interesting, or at least illustrative, by defining a second service, and a further entity within. This is so we can see for ourselves how universal introspection can be.&lt;/p&gt;
&lt;p&gt;Let&#39;s keep things simple from a mechanics perspective, introduce a simple new entity, &lt;code&gt;Colours&lt;/code&gt;, in the context of the Platonic &lt;a href=&quot;https://en.wikipedia.org/wiki/Theory_of_forms&quot;&gt;Theory of forms&lt;/a&gt; and annotate its string element with &lt;code&gt;@loud&lt;/code&gt;. There&#39;s no reason for this departure to the philosophical except to have something a little more adventurous than &amp;quot;Foo&amp;quot;s and &amp;quot;Bar&amp;quot;s.&lt;/p&gt;
&lt;p&gt;In addition, we&#39;ll add a &lt;code&gt;String&lt;/code&gt; element to the &lt;code&gt;Things&lt;/code&gt; entity in the original service, but &lt;em&gt;not&lt;/em&gt; annotate that with &lt;code&gt;@loud&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is what we then end up with in &lt;code&gt;services.cds&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt; Bookshop {
    &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books {
        &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID          : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
            title       : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
            &lt;span class=&quot;token annotation important&quot;&gt;@loud&lt;/span&gt; genre : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
            stock       : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
    }

    &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Things {
        &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID   : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
            name : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
    }
}

&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt; PlatonicForms {
    &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Colours {
        &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID         : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
            &lt;span class=&quot;token annotation important&quot;&gt;@loud&lt;/span&gt; name : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As well as the CSV data for the books, we&#39;ll add some for the things and colours:&lt;/p&gt;
&lt;p&gt;File: &lt;strong&gt;data/Bookshop.Things.csv&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-csv&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csv&quot;&gt;&lt;span class=&quot;token value&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;token value&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;apple&lt;/span&gt;
&lt;span class=&quot;token value&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;banana&lt;/span&gt;
&lt;span class=&quot;token value&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;cherry&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;File: &lt;strong&gt;data/PlatonicForms.Colours.csv&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-csv&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csv&quot;&gt;&lt;span class=&quot;token value&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;token value&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;Red&lt;/span&gt;
&lt;span class=&quot;token value&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;Green&lt;/span&gt;
&lt;span class=&quot;token value&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token value&quot;&gt;Blue&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, with this second service, we have to be more ready to process any service we come across; remember that in part 2 we explicitly picked out the &lt;code&gt;Bookshop&lt;/code&gt; service by name:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Bookshop &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;services&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But in this part we&#39;ll address (almost) the entirety of &lt;code&gt;cds.services&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;identifying-application-services&quot;&gt;Identifying application services&lt;/h2&gt;
&lt;p&gt;In addressing the entirety of &lt;code&gt;cds.services&lt;/code&gt; we&#39;ll need to ensure we pick out only &amp;quot;our&amp;quot; services, i.e. not the core framework&#39;s services such as the database service.&lt;/p&gt;
&lt;p&gt;Starting up the cds REPL with the &lt;code&gt;--run&lt;/code&gt; option (from the &lt;a href=&quot;https://cap.cloud.sap/docs/releases/dec24#cds-repl-enhancements&quot;&gt;CAP December 2024 release&lt;/a&gt;, and &lt;a href=&quot;https://example.com/website/blog/posts/2025/01/10/cap-node.js-plugins-part-2-using-the-repl/#new-repl-options&quot;&gt;as noted&lt;/a&gt; in the blog post for the previous part) we see the list of services &lt;code&gt;db&lt;/code&gt;, &lt;code&gt;Bookshop&lt;/code&gt; and &lt;code&gt;PlatonicForms&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ cds r &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
Welcome to cds repl &lt;span class=&quot;token function&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8.6&lt;/span&gt;.0
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - loaded model from &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;:

  services.cds

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

Following variables are made available &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; your repl&#39;s global context:

&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.

from cds.services: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  db,
  Bookshop,
  PlatonicForms,
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Simply &lt;span class=&quot;token builtin class-name&quot;&gt;type&lt;/span&gt; e.g. PlatonicForms &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the prompt to use the respective objects.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moreover, examining the services as we did last time shows us what we need to know:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; const basicInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;services&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token operator&quot;&gt;(&lt;/span&gt;basicInfo&lt;span class=&quot;token operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;db&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sqlite&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app-service&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PlatonicForms&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app-service&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, it will be useful to have a helper so that we can pick out &amp;quot;our&amp;quot; services, something like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;isAppService&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app-service&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this we can gather our services into an array, thus:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; services &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;services&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isAppService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While &lt;code&gt;basicInfo&lt;/code&gt; is somewhat more useful in an interactive REPL session, this &lt;code&gt;isAppService&lt;/code&gt; &lt;a href=&quot;https://dcl-prog.stanford.edu/function-predicate.html&quot;&gt;predicate function&lt;/a&gt; is going to help us in our real plugin code itself, along with &lt;code&gt;loudElements&lt;/code&gt;, which, as a reminder, looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;loudElements&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;en&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; en&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; en&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@loud&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;getting-the-timing-right&quot;&gt;Getting the timing right&lt;/h2&gt;
&lt;p&gt;So far we&#39;ve been working in the cds REPL, starting up the service on invocation, with the &lt;code&gt;--run&lt;/code&gt; option, or once we are in the REPL, with e.g. &lt;code&gt;const test = cds.test()&lt;/code&gt;. So by the time we start to introspect, to look at, say, &lt;code&gt;cds.services&lt;/code&gt;, the server is already started up and values are available.&lt;/p&gt;
&lt;p&gt;But what about at runtime?&lt;/p&gt;
&lt;p&gt;The plugin needs to be ready to inject the custom behavior at the right time, i.e. once the CAP server is started and all the services have been bootstrapped. As well as regular events such as before, on or after a request, the CAP server itself also sports &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-server#lifecycle-events&quot;&gt;lifecycle events&lt;/a&gt;, and the &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-server#served&quot;&gt;served&lt;/a&gt; event is ideal for what we need.&lt;/p&gt;
&lt;p&gt;Let&#39;s add some simple code inside a handler for &lt;code&gt;served&lt;/code&gt;, in our plugin (i.e. in &lt;code&gt;loud/cds-plugin.js&lt;/code&gt;), adding the definitions of &lt;code&gt;basicInfo&lt;/code&gt;, &lt;code&gt;isAppService&lt;/code&gt; and &lt;code&gt;loudElements&lt;/code&gt;, and grabbing the service list into an array:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@sap/cds&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; log &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;LOUD&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Starting up ...&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;served&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;basicInfo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;isAppService&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app-service&#39;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;loudElements&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;en&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; en&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; en&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@loud&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; services &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;services&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isAppService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;basicInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;When there are no arguments expected or needed, I like the &amp;quot;underscore as parameter placeholder&amp;quot; style of arrow function expressions, i.e. (&lt;code&gt;_ =&amp;gt; { ... }&lt;/code&gt;) but you might prefer the &amp;quot;empty list&amp;quot; style i.e. (&lt;code&gt;() =&amp;gt; { ... }&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Starting up the server:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;LOUD cds w&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we see the debug output from our plugin:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;cds serve all &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;with&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;mocks &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;in&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;memory&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LOUD&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; Starting up &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; serving Bookshop &lt;span class=&quot;token operator&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/odata/v4/bookshop&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; serving PlatonicForms &lt;span class=&quot;token operator&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/odata/v4/platonic-forms&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LOUD&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app-service&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PlatonicForms&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app-service&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, that&#39;s the timing sorted out. Now we just need to put everything together into that &lt;code&gt;served&lt;/code&gt; lifecycle event handler.&lt;/p&gt;
&lt;h2 id=&quot;fleshing-out-the-plugin-activities&quot;&gt;Fleshing out the plugin activities&lt;/h2&gt;
&lt;p&gt;We&#39;ll replace this line, in the handler above:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;basicInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with something that actually works through those services and does the right thing.&lt;/p&gt;
&lt;p&gt;As a reminder, this is to be a super simple plugin that uppercases string values for elements annotated with &lt;code&gt;@loud&lt;/code&gt;. Let&#39;s use one of the best features of the set of &lt;a href=&quot;https://example.com/website/blog/posts/2024/11/07/five-reasons-to-use-cap/#design-time-tools&quot;&gt;design time tools&lt;/a&gt; to iterate towards what we need - the auto restart of the CAP server on changes.&lt;/p&gt;
&lt;h3 id=&quot;identifying-the-element-candidates&quot;&gt;Identifying the element candidates&lt;/h3&gt;
&lt;p&gt;First, replacing that &lt;code&gt;log.debug&lt;/code&gt; line with this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entities&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Produce a summary of entities and any annotated elements&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;loudElements&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Only keep entities that have a non-zero list of annotated elements&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Temporarily emit what we end up with&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; -&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elements&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gives us the following two lines in the CAP server output (when running with &lt;code&gt;DEBUG&lt;/code&gt; set on for our &lt;code&gt;LOUD&lt;/code&gt; logger identifier, of course):&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LOUD&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; Bookshop&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Books &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; genre
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LOUD&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; PlatonicForms&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Colours &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; name&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;setting-up-a-handler-to-provide-the-effect&quot;&gt;Setting up a handler to provide the effect&lt;/h3&gt;
&lt;p&gt;At this point we have everything we need. To bring about the &amp;quot;loud&amp;quot; effect, we can hook ourselves onto the regular processing of read events for the appropriate entities; in other words, we can register &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/core-services#srv-after-request&quot;&gt;after&lt;/a&gt; phase handlers.&lt;/p&gt;
&lt;p&gt;Let&#39;s replace that inner &lt;code&gt;.forEach(x =&amp;gt; log.debug(...)&lt;/code&gt; part within the function chain above, with a new function that does this. The entire resulting outer &lt;code&gt;forEach&lt;/code&gt; should now look like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;entities&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Produce a summary of entities and any annotated elements&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;loudElements&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Only keep entities that have a non-zero list of annotated elementd&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Process each entity, setting up a READ handler&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;en&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Setting up a READ handler for &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;READ&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; en&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;records&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                records&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
                    en&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember that the &lt;code&gt;@loud&lt;/code&gt;-annotated elements are stored in the &lt;code&gt;elements&lt;/code&gt; property of the entity in &lt;code&gt;en&lt;/code&gt;, i.e. &lt;code&gt;en.elements&lt;/code&gt;, so we can just iterate over them (&lt;code&gt;en.elements.forEach&lt;/code&gt;) converting the values using &lt;code&gt;toUpperCase()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At this point when the server restarts, we see this in the debug output:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LOUD&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; Setting up a READ handler for Bookshop&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Books
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LOUD&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; Setting up a READ handler for PlatonicForms&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Colours&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;checking-the-effect&quot;&gt;Checking the effect&lt;/h3&gt;
&lt;p&gt;That&#39;s all we need to do. We can check the effect with some HTTP requests:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; localhost:4004/odata/v4/bookshop/Books &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;@odata.context&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$metadata&lt;/span&gt;#Books&quot;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The Hitchhiker&#39;s Guide To The Galaxy&quot;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&quot;genre&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SCIENCE FICTION&quot;&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&quot;stock&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The value for the &lt;code&gt;genre&lt;/code&gt; element is uppercased, and the value for &lt;code&gt;title&lt;/code&gt; is not, as that element is not annotated with &lt;code&gt;@loud&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, none of the strings for &lt;code&gt;Things&lt;/code&gt; are uppercased:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; localhost:4004/odata/v4/bookshop/Things &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;@odata.context&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$metadata&lt;/span&gt;#Things&quot;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;apple&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;banana&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cherry&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the string values for the &lt;code&gt;name&lt;/code&gt; element of the &lt;code&gt;Colours&lt;/code&gt; entity in the &lt;code&gt;PlatonicForms&lt;/code&gt; service are uppercased, as that element is annotated with &lt;code&gt;@loud&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; localhost:4004/odata/v4/platonic-forms/Colours &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;@odata.context&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$metadata&lt;/span&gt;#Colours&quot;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;RED&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;GREEN&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;,
      &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;BLUE&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s pretty much it!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;And that&#39;s it for this mini-series too. Of course, this is just scratching the surface of what&#39;s possible, but hopefully you can see how straightforward it is to create your own plugin. And perhaps the main takeaways from what we&#39;ve seen are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the REPL is one of CAP&#39;s greatest superpowers, and can be one of your superpowers too&lt;/li&gt;
&lt;li&gt;introspection is straightforward and brings you and your understanding closer to the CAP mechanics and philosophy&lt;/li&gt;
&lt;li&gt;getting a plugin to do something doesn&#39;t require any &amp;quot;special&amp;quot; code, it&#39;s just events and handlers all the way down&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>CAP Node.js plugins - part 2 - using the REPL</title>
    <link href="https://example.com/website/blog/2025-01-10-cap-nodejs-plugins--part-2--using-the-repl/" />
    <updated>2025-01-10T00:00:00Z</updated>
    <id>https://example.com/website/blog/2025-01-10-cap-nodejs-plugins--part-2--using-the-repl/</id>
    <content type="html">&lt;p&gt;For information on the series and links to all resources, see the &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/30/cap-node.js-plugins/&quot;&gt;CAP Node.js Plugins&lt;/a&gt; series post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The examples in this post are based on CAP Node.js at release 8.6 (&lt;a href=&quot;https://cap.cloud.sap/docs/releases/dec24&quot;&gt;December 2024&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;picking-up-from-where-we-left-off-last-time&quot;&gt;Picking up from where we left off last time&lt;/h2&gt;
&lt;p&gt;Now we have a skeleton plugin package set up and wired in (which we did in part 1), we can turn our attention to how they can be used to enhance the standard CAP service processing.&lt;/p&gt;
&lt;p&gt;Let&#39;s have our plugin bring about some behaviour for a custom annotation we&#39;ll add to one of the elements in one of the entities in our &lt;a href=&quot;https://example.com/website/blog/posts/2024/10/05/cap-node.js-plugins-part-1-how-things-work/#setting-the-scene&quot;&gt;service&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;adding-a-custom-annotation&quot;&gt;Adding a custom annotation&lt;/h2&gt;
&lt;p&gt;If we annotate an element, for example the &lt;code&gt;genre&lt;/code&gt; element of the &lt;code&gt;Books&lt;/code&gt; entity, with &lt;code&gt;@loud&lt;/code&gt;, that signifies that the value of that element should be returned in UPPER CASE.&lt;/p&gt;
&lt;p&gt;Let&#39;s annotate &lt;code&gt;Books.genre&lt;/code&gt; with &lt;code&gt;@loud&lt;/code&gt; in the CDL definition so it looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt; Bookshop {
    &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books {
        &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID          : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
            title       : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
            &lt;span class=&quot;token annotation important&quot;&gt;@loud&lt;/span&gt; genre : &lt;span class=&quot;token type builtin&quot;&gt;String&lt;/span&gt;;
            stock       : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
    }
    &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Things {
        &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;key&lt;/span&gt; ID : &lt;span class=&quot;token type builtin&quot;&gt;Integer&lt;/span&gt;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea is that the contents of the &lt;code&gt;genre&lt;/code&gt; element should be converted to all capitals before being returned, so that the responses look like this (notice how &amp;quot;SCIENCE FICTION&amp;quot; is presented in all capitals, i.e. in a &amp;quot;loud&amp;quot; shouty fashion).&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;@odata.context&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;$metadata#Books&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The Hitchhiker&#39;s Guide To The Galaxy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;genre&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SCIENCE FICTION&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;stock&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This custom annotation won&#39;t have any adverse effect on the standard service provision, but it&#39;s available to us when we introspect the service and its makeup.&lt;/p&gt;
&lt;p&gt;To see how this completely new and random annotation is handled in general, let&#39;s see what the CDS compiler makes of it. Let&#39;s ask for the YAML representation of the Core Schema Notation (CSN) for our CDS model:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;cds compile &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--to&lt;/span&gt; yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what we get:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;definitions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;Bookshop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; service&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;Bookshop.Books&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; entity
    &lt;span class=&quot;token key atrule&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.Integer&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.String&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;genre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;&#39;@loud&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.String&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;stock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.Integer&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;Bookshop.Things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; entity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.Integer&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; CDS Compiler v5.6.0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;flavor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inferred&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;$version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how our new annotation is captured and stored simply as a new property for the element, a property which has the annotation itself as the key and a boolean &lt;code&gt;true&lt;/code&gt; as the value:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;genre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;&#39;@loud&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cds.String&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the annotation as the property key means that it won&#39;t clash with anything standard. This is so simple that it&#39;s easy to gloss over this detail and miss the beauty of the design here.&lt;/p&gt;
&lt;h2 id=&quot;starting-up-the-cds-repl-and-a-server-instance&quot;&gt;Starting up the cds REPL and a server instance&lt;/h2&gt;
&lt;p&gt;We can use the cds REPL to manually and interactively explore the service and everything it contains. The cds REPL has had some &lt;a href=&quot;https://cap.cloud.sap/docs/releases/dec24#cds-repl-enhancements&quot;&gt;recent enhancements in the December 2024&lt;/a&gt; release, so we&#39;ll explore some of those throughout this session.&lt;/p&gt;
&lt;p&gt;For now, though, there&#39;s a &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-test&quot;&gt;cds.test&lt;/a&gt; library for writing tests for CAP Node.js services, and we can also &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-test#using-cds-test-in-repl&quot;&gt;use that library directly in the REPL&lt;/a&gt; to great effect.&lt;/p&gt;
&lt;p&gt;Let&#39;s start the REPL with &lt;code&gt;cds repl&lt;/code&gt; and enter &lt;code&gt;const test = await cds.test()&lt;/code&gt;. The output is what we see from a standard server startup, including the announcement from our fledgling plugin (see &lt;a href=&quot;https://example.com/website/blog/2025-01-10-cap-nodejs-plugins--part-2--using-the-repl/#appendix-a-turning-down-the-logging&quot;&gt;Appendix A - Turning down the logging&lt;/a&gt; on suppressing this by default). Here&#39;s a sample session output (the &lt;code&gt;&amp;gt;&lt;/code&gt; symbol is the REPL prompt character):&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ cds repl
Welcome to cds repl &lt;span class=&quot;token function&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8.6&lt;/span&gt;.0
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; const &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; await cds.test&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LOUD&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - Starting up &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - loaded model from &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;:

  services.cds

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - connect to db &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; sqlite &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url: &lt;span class=&quot;token string&quot;&gt;&#39;:memory:&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; init from data/Bookshop.Books.csv
/&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; successfully deployed to in-memory database.

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - using auth strategy &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  kind: &lt;span class=&quot;token string&quot;&gt;&#39;mocked&#39;&lt;/span&gt;,
  impl: &lt;span class=&quot;token string&quot;&gt;&#39;node_modules/@sap/cds/lib/srv/middlewares/auth/basic-auth&#39;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - using new OData adapter
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - serving Bookshop &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path: &lt;span class=&quot;token string&quot;&gt;&#39;/odata/v4/bookshop&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - server listening on &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url: &lt;span class=&quot;token string&quot;&gt;&#39;http://localhost:33821&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - launched at &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;/10/2025, &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;:02:01 PM, version: &lt;span class=&quot;token number&quot;&gt;8.6&lt;/span&gt;.0, in: &lt;span class=&quot;token number&quot;&gt;568&lt;/span&gt;.775ms
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cds&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; - &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; terminate with ^C &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The CAP server is started bound to a random port, rather than the default one. This is so it doesn&#39;t clash with a CAP server that you might already have running.&lt;/p&gt;
&lt;p&gt;We&#39;re not actually interested in what&#39;s stored in the &lt;code&gt;test&lt;/code&gt; constant, the assignment is made just to avoid the output of &lt;code&gt;cds.test()&lt;/code&gt; being otherwise emitted in the REPL display and overwhelming us.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point we can start &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-ql&quot;&gt;querying&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; await SELECT &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;title, genre&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; .from &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;Bookshop.Books&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    title: &lt;span class=&quot;token string&quot;&gt;&quot;The Hitchhiker&#39;s Guide To The Galaxy&quot;&lt;/span&gt;,
    genre: &lt;span class=&quot;token string&quot;&gt;&#39;Science Fiction&#39;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But instead of querying the data, what we really want to do in this session is explore the service structure, bearing in mind that, usually, a service contains one or more entities, and those entities contain one or more elements (fields).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of using &lt;code&gt;cds.test()&lt;/code&gt; there are features introduced to the cds REPL in the December 2024 release which makes this more comfortable; use either of these approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cds repl --run .&lt;/code&gt; in the project directory (&lt;code&gt;cds r -r .&lt;/code&gt; is the short version)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.run .&lt;/code&gt; at the REPL prompt&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;exploring-the-cds-facade&quot;&gt;Exploring the cds facade&lt;/h2&gt;
&lt;p&gt;Just like we used the &lt;code&gt;cds&lt;/code&gt; facade to discover the values of &lt;code&gt;cds.root&lt;/code&gt; and &lt;code&gt;cds.home&lt;/code&gt; &lt;a href=&quot;https://example.com/website/blog/posts/2024/10/05/cap-node.js-plugins-part-1-how-things-work/#diving-into-the-cap-server-source-code&quot;&gt;in part 1&lt;/a&gt;, we can use it to look at the services.&lt;/p&gt;
&lt;p&gt;Entering &lt;code&gt;cds.&lt;/code&gt; and then hitting &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;  a couple of times will cause the autocomplete facility to show what&#39;s on offer:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; cds.
cds.__proto__             cds.hasOwnProperty        cds.isPrototypeOf         cds.propertyIsEnumerable
cds.toLocaleString        cds.toString              cds.valueOf

cds.addListener           cds.eventNames            cds.getMaxListeners       cds.listenerCount
cds.listeners             cds.off                   cds.on                    cds.once
cds.prependListener       cds.prependOnceListener   cds.rawListeners          cds.removeAllListeners
cds.removeListener        cds.setMaxListeners

cds.Association           cds.Composition           cds.DatabaseService       cds.EventContext
cds.MessagingService      cds.RemoteService         cds.array                 cds.auth
cds.build                 cds.clone                 cds.constructor           cds.create
cds.delete                cds.disconnect            cds.emit                  cds.entities
cds.event                 cds.exit                  cds.foreach               cds.import
cds.in                    cds.insert                cds.lazified              cds.lazify
cds.localize              cds.odata                 cds.outboxed              cds.read
cds.reflect               cds.run                   cds.schema                cds.spawn
cds.stream                cds.struct                cds.transaction           cds.tx
cds.txs                   cds.unboxed               cds.update                cds.upsert

cds.ApplicationService    cds.Event                 cds.Request               cds.Service
cds.User                  cds.__esModule            cds._context              cds._edmProviders
cds._events               cds._eventsCount          cds._local                cds._log
cds._maxListeners         cds.app                   cds.assert                cds.builtin
cds.cli                   cds.compile               cds.compiler              cds.connect
cds.context               cds.db                    cds.debug                 cds.default
cds.deploy                cds.edmxs                 cds.entity                cds.env
cds.error                 cds.exec                  cds.extend                cds.get
cds.home                  cds.infer                 cds.linked                cds.load
cds.log                   cds.middlewares           cds.minify                cds.model
cds.options               cds.parse                 cds.plugins               cds.ql
cds.repl                  cds.requires              cds.resolve               cds.root
cds.serve                 cds.server                cds.service               cds.services
cds.shutdown              cds.test                  cds.type                  cds.utils
cds.version&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of these properties are from the standard JavaScript object mechanism, but some are CAP specific and made available as part of the facade.&lt;/p&gt;
&lt;p&gt;That&#39;s one way to start to explore. Another is to use one of the &lt;a href=&quot;https://cap.cloud.sap/docs/tools/cds-cli#cds-repl&quot;&gt;cds REPL features&lt;/a&gt;: &lt;code&gt;.inspect&lt;/code&gt;, which has a &lt;code&gt;.depth&lt;/code&gt; setting (the default value is 11, i.e. &amp;quot;very deep!&amp;quot;, but can be changed) that can specified explicitly on the fly too.&lt;/p&gt;
&lt;p&gt;Let&#39;s use this to examine the facade:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inspect cds &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;depth&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;cds:&lt;/span&gt; cds &lt;span class=&quot;token operator&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;_events:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Object&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;null&lt;/span&gt; prototype&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;_eventsCount:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;_maxListeners:&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;model:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LinkedCSN&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;db:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;SQLiteService&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;cli:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;root:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/workspaces/project&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;services:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;extend:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function &lt;span class=&quot;token operator&quot;&gt;(&lt;/span&gt;anonymous&lt;span class=&quot;token operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;8.6.0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;token property&quot;&gt;User:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;middlewares:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;shutdown:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AsyncFunction&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; _shutdown&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token operator&quot;&gt;(&lt;/span&gt;shapeMode&lt;span class=&quot;token operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token operator&quot;&gt;(&lt;/span&gt;kCapture&lt;span class=&quot;token operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;a-first-look-at-the-service-s&quot;&gt;A first look at the service(s)&lt;/h2&gt;
&lt;p&gt;If we enter &lt;code&gt;cds.services&lt;/code&gt; at the REPL prompt, we&#39;ll see an avalanche of information, ending like this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;          ...

          Layer {
            handle: [Function (anonymous)],
            name: &#39;&lt;anonymous&gt;&#39;,
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^&#92;/?(?=&#92;/|$)/i { fast_star: false, fast_slash: true },
            route: undefined
          }
        ],
        path: &#39;/odata/v4/bookshop&#39;
      }
    },
    path: &#39;/odata/v4/bookshop&#39;,
    &#39;$linkProviders&#39;: [ [Function (anonymous)] ]
  }
}&lt;/anonymous&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good, but too much.&lt;/p&gt;
&lt;p&gt;We can see from the closing brace that we can probably treat it as an object. Evaluating &lt;code&gt;typeof(cds.services)&lt;/code&gt; confirms this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; typeof&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cds.services&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
object&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use standard JavaScript affordances to look at the keys. Let&#39;s try:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Object.keys&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cds.services&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;db&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;d be right to guess that the first key represents the database service. And the second key points to the value that represents our &lt;code&gt;Bookshop&lt;/code&gt; service.&lt;/p&gt;
&lt;p&gt;We can confirm this as follows:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Object.values&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cds.services&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;x.name, x.kind&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;db&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;sqlite&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;app-service&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;We could also achieve this by reifying &lt;code&gt;cds.services&lt;/code&gt; as an array, like this: &lt;code&gt;[...cds.services].map(x =&amp;gt; [x.name, x.kind])&lt;/code&gt;. See later for more on the rest parameter syntax (&lt;code&gt;...&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact, this &amp;quot;basic info&amp;quot; of name and kind is going to be useful again shortly, so let&#39;s create a helper function thus:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;basicInfo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use it like this: &lt;code&gt;[...cds.services].map(basicInfo)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, let&#39;s keep going. In CAP, &lt;a href=&quot;https://example.com/website/blog/posts/2024/12/10/tasc-notes-part-4/#everything-is-a-service&quot;&gt;everything is a service&lt;/a&gt;, which explains why we see the SQLite database mechanism appearing here too. But we&#39;re interested in our &lt;code&gt;Bookshop&lt;/code&gt; service, which incidentally has the &lt;code&gt;kind&lt;/code&gt; value of &lt;code&gt;app-service&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;digging-deeper-into-the-bookshop-service&quot;&gt;Digging deeper into the Bookshop service&lt;/h2&gt;
&lt;p&gt;To make it more convenient for us to work with, let&#39;s get a handle on that service object using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;destructuring assignment&lt;/a&gt; like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Bookshop &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds.services&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s have a look at what&#39;s available in this service object, with &lt;code&gt;Object.keys(Bookshop)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Object.keys&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Bookshop&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;_handlers&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&#39;options&#39;&lt;/span&gt;,   &lt;span class=&quot;token string&quot;&gt;&#39;kind&#39;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&#39;model&#39;&lt;/span&gt;,     &lt;span class=&quot;token string&quot;&gt;&#39;definition&#39;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&#39;namespace&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;operations&#39;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&#39;entities&#39;&lt;/span&gt;,  &lt;span class=&quot;token string&quot;&gt;&#39;_datasource&#39;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&#39;endpoints&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;_adapters&#39;&lt;/span&gt;,
  &lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;,      &lt;span class=&quot;token string&quot;&gt;&#39;$linkProviders&#39;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s a good start, but we can also use the &lt;code&gt;.inspect&lt;/code&gt; feature with the depth set to the &amp;quot;shallowest&amp;quot; value (0) to look at more or less the same information, but with more hints as to the nature of each of the properties, in a less generic JavaScript context and a more specific CAP context:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inspect Bookshop &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;depth&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token property&quot;&gt;Bookshop:&lt;/span&gt; ApplicationService &lt;span class=&quot;token operator&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;options:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app-service&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;model:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LinkedCSN&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;handlers:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;EventHandlers&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;definition:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;namespace:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;actions:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; children&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; LinkedDefinitions&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;entities:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LinkedDefinitions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;endpoints:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;_adapters:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/odata/v4/bookshop&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;$linkProviders&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to dig down through the entities to the elements, so let&#39;s now examine the &lt;code&gt;entities&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;If we start typing &lt;code&gt;Bookshop.entities&lt;/code&gt; at the prompt we should see the REPL already start eagerly returning a value which represents a function that returns a &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-reflect#iterable&quot;&gt;LinkedDefinitions&lt;/a&gt; object:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Bookshop.entities
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Function: children&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; LinkedDefinitions Books: entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; kind: &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt;, elements: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LinkedDefinitions&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;We already got a clue about this from the output above - the &lt;code&gt;entities&lt;/code&gt; property was shown as being an array of &lt;code&gt;LinkedDefinitions&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So while we can&#39;t have that expression emit the entities directly (basically because it&#39;s an &lt;em&gt;iterable&lt;/em&gt;), we can resolve them into an array with &lt;code&gt;...&lt;/code&gt;, which is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot;&gt;rest parameter syntax&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since the August 2024 release of CAP Node.js (8.2.1) this conversion to array is now required because of some &lt;a href=&quot;https://cap.cloud.sap/docs/releases/aug24#changes-in-node-js&quot;&gt;important changes made to LinkedDefinitions&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&#39;s do that now with &lt;code&gt;entities = [...Bookshop.entities]&lt;/code&gt; which will also emit a summary of the value of the new &lt;code&gt;entities&lt;/code&gt; variable created:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; entities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.Bookshop.entities&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    kind: &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt;,
    elements: LinkedDefinitions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      ID: Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key: true, type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      title: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      genre: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@loud&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true, type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
      stock: Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    kind: &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt;,
    elements: LinkedDefinitions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      ID: Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key: true, type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;We can also use JavaScript&#39;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;&lt;code&gt;for ... in&lt;/code&gt;&lt;/a&gt; statement, or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;code&gt;for ... of&lt;/code&gt;&lt;/a&gt; statement, both of which can work with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;iterables&lt;/a&gt;, as can the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot;&gt;rest parameter syntax&lt;/a&gt; here too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are two entities in the &lt;code&gt;services.cds&lt;/code&gt; file, and they are &lt;code&gt;Books&lt;/code&gt; and &lt;code&gt;Things&lt;/code&gt;. Therefore there are two elements in the &lt;code&gt;entities&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;We can confirm that with &lt;code&gt;entities.length&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; entities.length
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;looking-at-individual-entities-and-their-elements&quot;&gt;Looking at individual entities and their elements&lt;/h2&gt;
&lt;p&gt;Let&#39;s look at some of the aspects of the entities using our useful basic info function:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; entities.map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;basicInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop.Books&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop.Things&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also examine the elements of the first entity (&lt;code&gt;Bookshop.Books&lt;/code&gt;) like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; entities&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;.elements
LinkedDefinitions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ID: Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key: true, type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  title: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  genre: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@loud&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true, type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  stock: Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the &lt;code&gt;entities[0].elements&lt;/code&gt; property is shown as being of a &lt;a href=&quot;https://cap.cloud.sap/docs/node.js/cds-reflect#iterable&quot;&gt;LinkedDefinitions&lt;/a&gt; type, which is, as we have found out already, not an array per se, but an iterable.&lt;/p&gt;
&lt;p&gt;So let&#39;s explore, like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;let el of entities&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;.elements&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; console.log&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el.name, Object.keys&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt;
ID &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;key&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
title &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
genre &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@loud&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
stock &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are the elements (fields) of our &lt;code&gt;Book&lt;/code&gt; entity. And look - there&#39;s our custom &lt;code&gt;@loud&lt;/code&gt; annotation on the &lt;code&gt;genre&lt;/code&gt; element!&lt;/p&gt;
&lt;h2 id=&quot;identifying-the-elements-annotated-with-loud&quot;&gt;Identifying the elements annotated with @loud&lt;/h2&gt;
&lt;p&gt;Let&#39;s define a function &lt;code&gt;loudElements&lt;/code&gt; that we can use when mapping over the entities to return a list of entities and any corresponding elements that have been annotated with &lt;code&gt;@loud&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;loudElements&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;en&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; en&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; en&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@loud&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This takes an entity &lt;code&gt;en&lt;/code&gt;, and returns an object with three properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the entity&#39;s name&lt;/li&gt;
&lt;li&gt;the entire entity object&lt;/li&gt;
&lt;li&gt;a list of zero or more element names that have the &lt;code&gt;@loud&lt;/code&gt; annotation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This was both possible and easy because of the wonderfully beautiful and simple way annotations are processed and stored.&lt;/p&gt;
&lt;p&gt;Now, we can map this function over the list of entities, which should return something like this (pay particular attention to the value of the &lt;code&gt;elements&lt;/code&gt; property in each of the array items):&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; entities.map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;loudElements&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name: &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop.Books&#39;&lt;/span&gt;,
    entity: entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      kind: &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt;,
      elements: LinkedDefinitions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ID: Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key: true, type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
        title: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
        genre: String &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@loud&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; true, type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.String&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
        stock: Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    elements: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;genre&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name: &lt;span class=&quot;token string&quot;&gt;&#39;Bookshop.Things&#39;&lt;/span&gt;,
    entity: entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      kind: &lt;span class=&quot;token string&quot;&gt;&#39;entity&#39;&lt;/span&gt;,
      elements: LinkedDefinitions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ID: Integer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key: true, type: &lt;span class=&quot;token string&quot;&gt;&#39;cds.Integer&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,
    elements: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We only annotated the &lt;code&gt;genre&lt;/code&gt; element of the &lt;code&gt;Books&lt;/code&gt; entity, so this makes sense.&lt;/p&gt;
&lt;p&gt;This way we can identify those entities upon which we need to focus.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This post just scratches the surface of the power that the cds REPL gives us as developers, to explore, understand, manipulate and write code against the services and other artifacts presented in what we&#39;re building, both in &lt;em&gt;our&lt;/em&gt; user space, but also in the CAP framework&#39;s &amp;quot;kernel&amp;quot; space (see the &lt;a href=&quot;https://example.com/website/blog/posts/2024/11/07/five-reasons-to-use-cap/#kernel-space-and-user-space&quot;&gt;Kernel space and user space&lt;/a&gt; section of &lt;a href=&quot;https://example.com/website/blog/posts/2024/11/07/five-reasons-to-use-cap/&quot;&gt;Five reasons to use CAP&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.youtube.com/watch?v=hi7NXlMl3iU&quot;&gt;the third and final part&lt;/a&gt; to this series we can use the knowledge we&#39;ve gained from this cds REPL session to write our actual plugin!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;appendix-a-turning-down-the-logging&quot;&gt;Appendix A - Turning down the logging&lt;/h2&gt;
&lt;p&gt;The reason this line appears each and every time we start up the service, even in the REPL:&lt;/p&gt;
&lt;pre class=&quot;language-log&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-log&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;LOUD&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; Starting up &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is because by default, the &lt;code&gt;log(&#39;Starting up ...&#39;)&lt;/code&gt; call here in our plugin file &lt;code&gt;loud/cap-plugin.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@sap/cds&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; log &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;LOUD&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Starting up ...&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;emits at a level that finds its way to the server output by default.&lt;/p&gt;
&lt;p&gt;Switching this to an explicit call to &lt;code&gt;log.debug(&#39;Starting up ...&#39;)&lt;/code&gt;, which is at lower more detailed level that is not output by default, means that we don&#39;t see this line any more, except if we explicitly ask to see debug output, using the &lt;code&gt;DEBUG&lt;/code&gt; environment variable, for example like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;LOUD cds &lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or even (turning everything up to 11):&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;all cds &lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>