<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Blog Title</title>
  <subtitle>This is a longer description about your blog.</subtitle>
  <link href="https://example.com/website/feed/feed.xml" rel="self" />
  <link href="https://example.com/website/" />
  <updated>2025-08-06T00:00:00Z</updated>
  <id>https://example.com/website/</id>
  <author>
    <name>Your Name</name>
  </author>
  <entry>
    <title>Neovim configuration for file and module navigation in CDS models</title>
    <link href="https://example.com/website/blog/2025-08-06-neovim-configuration-for-file-and-module-navigation-in-cds-models/" />
    <updated>2025-08-06T00:00:00Z</updated>
    <id>https://example.com/website/blog/2025-08-06-neovim-configuration-for-file-and-module-navigation-in-cds-models/</id>
    <content type="html">&lt;h2 id=&quot;cds-modelling-across-files-and-modules&quot;&gt;CDS modelling across files and modules&lt;/h2&gt;
&lt;p&gt;In the context of CDS models, one of the best practices is to embrace &lt;a href=&quot;https://cap.cloud.sap/docs/about/best-practices#aspects&quot;&gt;aspects&lt;/a&gt; and &amp;quot;factor out separate concerns into separate files&amp;quot;. In addition to files the CDS compiler supports Node.js packages (modules).&lt;/p&gt;
&lt;p&gt;An example of both can be found in the &lt;a href=&quot;https://cap.cloud.sap/docs/tools/cds-cli#sample&quot;&gt;sample&lt;/a&gt; facet. Let&#39;s create a project based on this sample facet and explore.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /tmp &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cds init &lt;span class=&quot;token parameter variable&quot;&gt;--add&lt;/span&gt; sample sample &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; sample &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tree &lt;span class=&quot;token parameter variable&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
creating new CAP project &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; ./sample

adding nodejs
adding sample

successfully created project – &lt;span class=&quot;token builtin class-name&quot;&gt;continue&lt;/span&gt; with &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; sample

&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; samples on https://github.com/SAP-samples/cloud-cap-samples
learn about next steps at https://cap.cloud.sap
&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
├── README.md
├── app
│   ├── _i18n
│   │   ├── i18n.properties
│   │   └── i18n_de.properties
│   ├── admin-books
│   │   ├── fiori-service.cds
│   │   └── webapp
│   ├── appconfig
│   │   └── fioriSandboxConfig.json
│   ├── browse
│   │   ├── fiori-service.cds
│   │   └── webapp
│   ├── common.cds
│   ├── index.html
│   └── services.cds
├── db
│   ├── data
│   │   ├── sap.capire.bookshop-Authors.csv
│   │   ├── sap.capire.bookshop-Books.csv
│   │   ├── sap.capire.bookshop-Books_texts.csv
│   │   └── sap.capire.bookshop-Genres.csv
│   └── schema.cds
├── eslint.config.mjs
├── package.json
└── srv
    ├── admin-service.cds
    ├── admin-service.js
    ├── cat-service.cds
    └── cat-service.js

&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; directories, &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; files&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;examining-the-using-references&quot;&gt;Examining the &#39;using&#39; references&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;app/admin-books/fiori-service.cds&lt;/code&gt; there&#39;s this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { AdminService } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../../srv/admin-&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt;.cds&#39;;
&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../../db/schema&#39;;
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;AdminService&lt;/code&gt; is being imported from &lt;code&gt;../../srv/admin-service.cds&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; my } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../db/schema&#39;;
&lt;span class=&quot;token keyword&quot;&gt;service&lt;/span&gt; AdminService &lt;span class=&quot;token annotation important&quot;&gt;@(requires:&#39;admin&#39;)&lt;/span&gt; {
  &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token cdl-keyword keyword&quot;&gt;projection&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; my.Books;
  &lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Authors &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token cdl-keyword keyword&quot;&gt;projection&lt;/span&gt; &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;on&lt;/span&gt; my.Authors;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In turn, the entities here are from the &lt;code&gt;sap.capire.bookshop&lt;/code&gt; namespace which is imported from &lt;code&gt;../db/schema&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { Currency, managed, sap } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;@sap/cds/common&#39;;
&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; sap.capire.bookshop;

&lt;span class=&quot;token keyword&quot;&gt;entity&lt;/span&gt; Books : managed {
   ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;code&gt;Currency&lt;/code&gt;, &lt;code&gt;managed&lt;/code&gt; and &lt;code&gt;sap&lt;/code&gt; are imported from the module &lt;code&gt;@sap/cds/common&lt;/code&gt;, a file (&lt;code&gt;common.cds&lt;/code&gt;) within the &lt;code&gt;@sap/cds&lt;/code&gt; module, which (at this point) is available in the globally installed &lt;code&gt;@sap/cds-dk&lt;/code&gt; module location (as we haven&#39;t performed a project-local &lt;code&gt;npm install&lt;/code&gt; yet), and looks like this (heavily redacted):&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token cqlkeywords keyword&quot;&gt;type&lt;/span&gt; Currency : &lt;span class=&quot;token association-composition keyword&quot;&gt;Association to sap&lt;/span&gt;.common.Currencies;
...
&lt;span class=&quot;token keyword&quot;&gt;aspect&lt;/span&gt; managed {
  createdAt  : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp &lt;/span&gt;&lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $now;
  createdBy  : User      &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $user;
  modifiedAt : &lt;span class=&quot;token type builtin&quot;&gt;Timestamp &lt;/span&gt;&lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $now  &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.update&lt;/span&gt; : $now;
  modifiedBy : User      &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.insert&lt;/span&gt; : $user &lt;span class=&quot;token annotation important&quot;&gt;@cds.on.update&lt;/span&gt; : $user;
}
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;visualising-the-navigation-path&quot;&gt;Visualising the navigation path&lt;/h3&gt;
&lt;p&gt;Here&#39;s what these relations (and navigations) look like in &amp;quot;diagram&amp;quot; form (thanks to &lt;a href=&quot;https://asciiflow.com/#/&quot;&gt;ASCIIFlow&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;+-----------------------------+
|app/admin/fiori-service.cds  |
+-----------------------------+
|using ... from               |
|&#39;../../srv/admin-service.cds&#39;|
|             |              1|
+-------------|---------------+   +-----------------------------+
              +-------------------|srv/admin-service.cds        |
                                  +-----------------------------+
                                  |using ... from               |
                                  |&#39;../db/schema.cds&#39;           |
                                  |            |               2|
+-----------------------------+   +------------|----------------+
|db/schema.cds                |----------------+
+-----------------------------+
|using ... from               |
|&#39;@sap/cds/common&#39;            |
|             |              3|
+-------------|---------------+   +-----------------------------+
              +-------------------|@sap/cds/common              |
                                  +-----------------------------+
                                  |type Currency ...            |
                                  |aspect managed { ... }       |
                                  |                            4|
                                  +-----------------------------+&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;As mentioned earlier, the &lt;code&gt;@sap/cds/common&lt;/code&gt; resource is a file called &lt;code&gt;common.cds&lt;/code&gt; within the &lt;code&gt;@sap/cds&lt;/code&gt; module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What&#39;s notable is that these relations are expressed differently each time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the first points to &lt;code&gt;../../srv/admin-service.cds&lt;/code&gt; which has an explicit &lt;code&gt;.cds&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;the second points to &lt;code&gt;../db/schema&lt;/code&gt; which has no extension&lt;/li&gt;
&lt;li&gt;the third points to a Node.js module based resource &lt;code&gt;@sap/cds/common&lt;/code&gt;, again with no extension specified&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s a quick demo of how that navigation path can be followed in VS Code, with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=SAPSE.vscode-cds&quot;&gt;SAP CDS Language Support&lt;/a&gt; extension:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/blog/2025-08-06-neovim-configuration-for-file-and-module-navigation-in-cds-models/content/images/2025/08/vscode-nav.gif&quot; alt=&quot;navigation in VS Code&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;making-cds-model-navigation-work-in-neovim&quot;&gt;Making CDS model navigation work in Neovim&lt;/h2&gt;
&lt;p&gt;With the &lt;code&gt;@sap/cds-lsp&lt;/code&gt; language server in play, plus the Tree-sitter queries for CDS, I have a good experience in Neovim already (see &lt;a href=&quot;https://example.com/website/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, using the standard &lt;a href=&quot;https://neovim.io/doc/user/editing.html#gf&quot;&gt;gf&lt;/a&gt; mechanism left me wanting, due to the types of navigation target and the vagaries of how they are expressed. With a little configuration though, (which is still experimental at this stage, as I&#39;m still learning) I&#39;ve improved the situation.&lt;/p&gt;
&lt;p&gt;I added some &lt;a href=&quot;https://neovim.io/doc/user/usr_41.html#_writing-a-filetype-plugin&quot;&gt;ftplugin&lt;/a&gt; configuration specific to CDS files, in an &lt;code&gt;after/ftplugin/cds.lua&lt;/code&gt; file within my Neovim config, and it looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- Settings to be able to navigate to cds resources in Node.js modules&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Given a path p, add it to the &#39;path&#39; if it exists&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; addpath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fs_stat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Auto add .cds extension to files if necessary when nav with gf&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;suffixesadd &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.cds&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- Ensure that the literal @ symbol is treated as part of a filename&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- (required as the CAP module names are in the @sap namespace)&lt;/span&gt;
vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isfname&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;append &lt;span class=&quot;token string&quot;&gt;&#39;@-@&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- The standard module location&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; moduledir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/node_modules&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- If a project-local npm install has been executed then projpath&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- will reflect the project-local node_modules dir&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; projpath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;package.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; moduledir

&lt;span class=&quot;token comment&quot;&gt;-- We can also add the CAP global based node_modules dir,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- based on the location of the &#39;cds&#39; executable&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; cdsdkpath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exepath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cds&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/../lib/node_modules/@sap/cds-dk&#39;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; moduledir

&lt;span class=&quot;token comment&quot;&gt;-- Add them if they exist&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;addpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;projpath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;addpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cdsdkpath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s a quick summary:&lt;/p&gt;
&lt;p&gt;I have a simple function &lt;code&gt;addpath&lt;/code&gt; which will add a (path) value to &lt;code&gt;path&lt;/code&gt; option, which the help describes as &amp;quot;a list of directories which will be searched when using &lt;code&gt;gf&lt;/code&gt; ... and other commands&amp;quot;. The function uses &lt;a href=&quot;https://neovim.io/doc/user/lua.html#vim.fs.exists()&quot;&gt;uv.fs_stat&lt;/a&gt; to ensure the directory actually exists before adding it.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;suffixesadd&lt;/code&gt; option (via &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;suffixesadd&#39;&quot;&gt;vim.opt.suffixesadd&lt;/a&gt;) is also related to the use of &lt;code&gt;gf&lt;/code&gt; and is a &amp;quot;comma-separated list of suffixes, which are used when searching for a file for the &lt;code&gt;gf&lt;/code&gt;, &lt;code&gt;[I&lt;/code&gt;, etc. commands&amp;quot;. So here I add &lt;code&gt;.cds&lt;/code&gt; to this option for the case where an extension isn&#39;t given - like in this case:&lt;/p&gt;
&lt;pre class=&quot;language-cds&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cds&quot;&gt;&lt;span class=&quot;token using keyword&quot;&gt;using&lt;/span&gt; { sap.capire.bookshop &lt;span class=&quot;token cqlkeywords keyword&quot;&gt;as&lt;/span&gt; my } &lt;span class=&quot;token from keyword&quot;&gt;from&lt;/span&gt; &#39;../db/schema&#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The extension is omitted here as a sort of CAP best practice, and could in fact be &lt;code&gt;.csn&lt;/code&gt;, the compiled machine-readable equivalent of CDL (the human-readable language used in CDS model files). But I&#39;ll cross that bridge when I come to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&#39;s it with regards to handling navigation to other CDS model files. But navigation to Node.js modules requires a bit more fettling.&lt;/p&gt;
&lt;p&gt;The CAP modules are all in the &lt;code&gt;sap&lt;/code&gt; namespace. Namespaces, or &lt;a href=&quot;https://docs.npmjs.com/about-scopes&quot;&gt;scopes&lt;/a&gt;, are prefixed with the &lt;code&gt;@&lt;/code&gt; symbol (as in &lt;code&gt;@sap/cds&lt;/code&gt;, for example). When modules are installed, in the &lt;code&gt;node_modules/&lt;/code&gt; directory, the &lt;code&gt;@&lt;/code&gt;-prefixed namespace forms part of the directory structure. So in this &lt;code&gt;sample&lt;/code&gt; project, after running &lt;code&gt;npm install&lt;/code&gt;, here&#39;s where &lt;code&gt;@sap/cds/common&lt;/code&gt; is to be found:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node_modules/
├── @cap-js
│   ├── cds-types
│   │   ├── ...
│   │   └── scripts
│   ├── db-service
│   │   ├── ...
│   │   └── package.json
│   └── sqlite
│       ├── ...
│       └── package.json
└── @sap
    └── cds
        ├── CHANGELOG.md
        ├── LICENSE
        ├── README.md
        ├── _i18n
        ├── app
        ├── bin
  ---&gt;  ├── common.cds
        ├── eslint.config.mjs
        ├── lib
        ├── libx
        ├── package.json
        ├── server.js
        ├── srv
        └── tasks&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That means I need to add the literal &lt;code&gt;@&lt;/code&gt; symbol to the &lt;a href=&quot;https://neovim.io/doc/user/options.html#&#39;isfname&#39;&quot;&gt;isfname&lt;/a&gt; option, which denotes the characters included in filenames. If we look at the default value for &lt;code&gt;isfname&lt;/code&gt; (with &lt;code&gt;:set isfname?&lt;/code&gt;) we see this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@,48-57,/,.,-,_,+,,,#,$,%,~,=&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But &lt;code&gt;@&lt;/code&gt; here represents &amp;quot;alpha characters&amp;quot;, and to have the actual &lt;code&gt;@&lt;/code&gt; symbol included, one needs to add &lt;code&gt;@-@&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once that is done, it&#39;s just a question of determining:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the CAP Node.js project&#39;s root directory (with &lt;code&gt;vim.fs.root(0, &#39;package.json&#39;)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the location of the globally installed &lt;code&gt;@sap/cds-dk&lt;/code&gt; module, based on where the &lt;code&gt;cds&lt;/code&gt; executable can be found&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, &lt;code&gt;/node_modules&lt;/code&gt; is appended to each, and they&#39;re both passed to the &lt;code&gt;addpath&lt;/code&gt; function defined earlier.&lt;/p&gt;
&lt;p&gt;Once either or both these paths are in the &lt;code&gt;path&lt;/code&gt; option (depending on whether they exist or not), &lt;code&gt;gf&lt;/code&gt; based navigation can proceed successfully!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This was a quick configuration hack in an area of Neovim (well, Vim, I guess) that I hadn&#39;t previously much experience in. So it may need some more tweaking. But for now, it works well, as shown here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://example.com/website/blog/2025-08-06-neovim-configuration-for-file-and-module-navigation-in-cds-models/content/images/2025/08/neovim-nav.gif&quot; alt=&quot;navigation in Neovim&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In VS Code each newly navigated-to resource was opened in a separate tab by default. In Neovim they&#39;re opened in the same buffer, so to return to the previous resource in the &amp;quot;jump list&amp;quot; one can use &lt;code&gt;ctrl-o&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/posts/2025/08/04/excluding-specific-diagnostics-in-neovim/&quot;&gt;Excluding specific diagnostics in Neovim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Excluding specific diagnostics in Neovim</title>
    <link href="https://example.com/website/blog/2025-08-04-excluding-specific-diagnostics-in-neovim/" />
    <updated>2025-08-04T00:00:00Z</updated>
    <id>https://example.com/website/blog/2025-08-04-excluding-specific-diagnostics-in-neovim/</id>
    <content type="html">&lt;p&gt;Note: I&#39;m still learning (a) Lua, (b) the API surface of Neovim and (c) how the different core components interact and work together, so this may not be the best solution, but it works for me and I&#39;ve learned a lot digging in and putting it together.&lt;/p&gt;
&lt;p&gt;I recently revisited my Neovim config, with a view to updating and simplifying it with the advent of release 0.11. I covered some of this in my last Neovim related post &lt;a href=&quot;https://example.com/website/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;. In that context, when editing Node.js (JavaScript) files, everything worked nicely with regards to the Language Server and how the diagnostics were surfaced.&lt;/p&gt;
&lt;h2 id=&quot;a-desire-to-filter-out-a-specific-diagnostic&quot;&gt;A desire to filter out a specific diagnostic&lt;/h2&gt;
&lt;p&gt;That is, everything worked nicely ... with one annoyance - the hint level diagnostic &amp;quot;File is a CommonJS module&amp;quot; shown here on line 1:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;H   1 const cds = require(&#39;@sap/cds&#39;)     ■ File is a CommonJS module; it may be converted to an ES module.
    2 module.exports = cds.service.impl(function() {
    3   this.after(&#39;each&#39;, &#39;Books&#39;, book =&gt; {
    4     console.log(book
E   5   })     ■ &#39;,&#39; expected.
    6 })&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;For this sample display I&#39;d temporarily changed my preferred config so that all diagnostics are shown, as virtual text, rather than virtual lines, like this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua vim.diagnostic.config({virtual_lines = false, virtual_text = true})&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I wanted the language server to still publish diagnostics, but for me to be able to filter them.&lt;/p&gt;
&lt;h2 id=&quot;digging-into-the-neovim-docu&quot;&gt;Digging into the Neovim docu&lt;/h2&gt;
&lt;p&gt;In order to achieve this, I spent a pleasant morning today looking through the documentation and getting a better understanding of the API with respect to these features of Neovim (the links are to the documentation sections that are important here):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html&quot;&gt;Diagnostic framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lsp.html&quot;&gt;LSP client / framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://neovim.io/doc/user/lua.html&quot;&gt;Lua engine&lt;/a&gt; (including the &lt;code&gt;vim&lt;/code&gt; table-related functions)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-general-idea&quot;&gt;The general idea&lt;/h2&gt;
&lt;p&gt;Neovim has mechanisms for firing up language servers, connecting to them and making their features and functionality available in buffers. It also has facilities for managing diagnostics and surfacing them in different ways.&lt;/p&gt;
&lt;p&gt;With regards to diagnostics, a simplified flow between Neovim and a language server looks generally like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neovim attaches to a language server, sending the contents of the buffer to it for analysis&lt;/li&gt;
&lt;li&gt;The language server publishes hint, information, warning and error level diagnostics (via &lt;a href=&quot;https://code.visualstudio.com/api/language-extensions/programmatic-language-features#provide-diagnostics&quot;&gt;textDocument/publishDiagnostics&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;These diagnostics are stored in Neovim via a call to &lt;code&gt;vim.diagnostic.set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Depending on the configuration, the diagnostics are displayed appropriately in the buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I first went down the path of trying to add a filter in the last part (diagnostic display), I found that this was ultimately the wrong way to go about it, not least because I would have found myself having to override all the various diagnostic display affordances such as signs, virtual text, and so on.&lt;/p&gt;
&lt;p&gt;The key was to interrupt the &lt;em&gt;setting&lt;/em&gt; of the diagnostics so that I could filter some out before they were actually stored, which meant overriding &lt;code&gt;vim.diagnostic.set&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;examining-the-anatomy-of-a-diagnostic&quot;&gt;Examining the anatomy of a diagnostic&lt;/h2&gt;
&lt;p&gt;Understanding what a diagnostic looked like helped me enormously. In the JavaScript sample above, these two diagnostics are displayed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(H)INT 80001: File is a CommonJS module; it may be converted to an ES module.&lt;/li&gt;
&lt;li&gt;(E)RROR 1005: &#39;,&#39; expected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can look at what these are via &lt;code&gt;vim.diagnostic.get&lt;/code&gt;. Invoking this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua print(vim.diagnostic.get())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will just emit a table reference, something like this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;table: 0x68251cb7dca8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we can use the &lt;code&gt;vim.print&lt;/code&gt; function instead:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua vim.print(vim.diagnostic.get())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or even simply the &lt;code&gt;=&lt;/code&gt; mechanism:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;:lua =vim.diagnostic.get()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this will cause a formatted display of the table contents:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    bufnr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1005&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#39;,&#39; expected.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    namespace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    user_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      lsp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1005&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#39;,&#39; expected.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    bufnr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    end_lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    lnum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;File is a CommonJS module; it may be converted to an ES module.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    namespace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    user_data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      lsp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;File is a CommonJS module; it may be converted to an ES module.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        range &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            character &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        severity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I decided that I would want to filter on &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt;; the &lt;code&gt;source&lt;/code&gt; for both diagnostics here is &lt;code&gt;typescript&lt;/code&gt;, and the &lt;code&gt;code&lt;/code&gt; values are actually shown in the virtual text display already (&lt;code&gt;80001&lt;/code&gt; and &lt;code&gt;1005&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;how-diagnostics-are-set&quot;&gt;How diagnostics are set&lt;/h2&gt;
&lt;p&gt;Diagnostics find their way from the language server back into Neovim via &lt;code&gt;vim.diagnostic.set&lt;/code&gt; which &lt;a href=&quot;https://neovim.io/doc/user/diagnostic.html#vim.diagnostic.set()&quot;&gt;has this signature&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;set({namespace}, {bufnr}, {diagnostics}, {opts})&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;I was curious as to what the namespace was; the value is shown as &lt;code&gt;7&lt;/code&gt; for both diagnostic records above; looking at the namespaces with &lt;code&gt;:lua =vim.api.nvim_get_namespaces()&lt;/code&gt; shows this:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  lazy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.hlyank&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.references&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.semantic_tokens&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.semantic_tokens:1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.lsp.signature_help&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.terminal.prompt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.treesitter.highlighter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.vim.lsp.javascript.1.diagnostic.signs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.vim.lsp.javascript.1.diagnostic.underline&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim.vim.lsp.javascript.1.diagnostic.virtual_lines&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;vim.lsp.javascript.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which confirms that they&#39;re coming from the language server for TypeScript/JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;injecting-a-filter-into-vim-diagnostic-set&quot;&gt;Injecting a filter into vim.diagnostic.set&lt;/h3&gt;
&lt;p&gt;Once I understood this, I was able to create a simple module (it&#39;s my first real foray into custom modules, so I may be doing this suboptimally), in &lt;code&gt;~/.config/nvim/lua/qmacro/diagnostic.lua&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; M &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; original_vim_diagnostic_set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set

&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; filterbuilder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;-- if e.reason then&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;--   print(&#39;Filtering out&#39;, diagnostic.source, &#39;/&#39;, diagnostic.code, &#39;diagnostic -&#39;, e.reason)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;-- end&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

M&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exclude &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;diagnostic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bufnr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; diagnostics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; filtered_diagnostics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tbl_filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filterbuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; diagnostics&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;original_vim_diagnostic_set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ns&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bufnr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filtered_diagnostics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; M&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;using-the-module&quot;&gt;Using the module&lt;/h3&gt;
&lt;p&gt;Before walking through this, I thought it would help to show how I want to call this, from within my &lt;code&gt;~/.config/nvim/init.lua&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;qmacro.diagnostic&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;typescript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reason &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;yes I know already!&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In calling the &lt;code&gt;exclude&lt;/code&gt; function in this module, I can pass a table of exclude filters, each of which has a &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt; field, and an optional &lt;code&gt;reason&lt;/code&gt; field.&lt;/p&gt;
&lt;h3 id=&quot;a-walkthrough-of-the-module&quot;&gt;A walkthrough of the module&lt;/h3&gt;
&lt;p&gt;Now here&#39;s a brief breakdown of the module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I save the original &lt;code&gt;vim.diagnostic.set&lt;/code&gt; function in &lt;code&gt;original_vim_diagnostic_set&lt;/code&gt; so I can call it later&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;filterbuilder&lt;/code&gt; function takes a table of filters and produces a function (yes, I like higher order functions), specifically a predicate function, that can be then used with &lt;a href=&quot;https://neovim.io/doc/user/lua.html#vim.tbl_filter()&quot;&gt;vim.tbl_filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The predicate function produced also has some commented-out logging (that uses the optional &lt;code&gt;reason&lt;/code&gt; field from the filter entry) that I&#39;ll make good once I figure out the best way to log stuff cleanly and in accordance with standard levels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all that preparation, all that I then have to do is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Override the standard &lt;code&gt;vim.diagnostic.set&lt;/code&gt; function with one that injects a call to &lt;code&gt;vim.tbl_filter&lt;/code&gt; to remove any diagnostics that are caught by the exclude filters, before passing through the modified table and the rest of the original arguments to the original &lt;code&gt;vim.diagnostic.set&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&#39;s pretty much it.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This works for me so far, and getting to this stage has also taught me some more about Neovim&#39;s Lua API and various components.&lt;/p&gt;
&lt;p&gt;I added this setup to my Neovim configuration with &lt;a href=&quot;https://github.com/qmacro/dotfiles/commit/fb3272c121a5acd7610dc21aceb3a7bb53190257&quot;&gt;this commit to my dotfiles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Along with the Neovim documentation itself, the following resources helped clarify things in my mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://influentcoder.com/posts/nvim-diagnostics/&quot;&gt;Understanding Diagnostics in Neovim&lt;/a&gt; by Guillaume Humbert&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blob42.xyz/blog/neovim-diagnostic-filtering/&quot;&gt;Filtering Neovim Diagnostics&lt;/a&gt; by Chakib Benziane&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLep05UYkc6wTyBe7kPjQFWVXTlhKeQejM&quot;&gt;Advent of Neovim&lt;/a&gt; by TJ DeVries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/posts/2025/06/10/a-modern-and-clean-neovim-setup-for-cap-node.js-configuration-and-diagnostics/&quot;&gt;A modern and clean Neovim setup for CAP Node.js - configuration and diagnostics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://example.com/website/blog/posts/2025/08/06/neovim-configuration-for-file-and-module-navigation-in-cds-models/&quot;&gt;Neovim configuration for file and module navigation in CDS models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>